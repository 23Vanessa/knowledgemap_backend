// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/class.proto

/*
	Package api is a generated protocol buffer package.

	It is generated from these files:
		api/class.proto

	It has these top-level messages:
		ClassReq
		ClassReply
		UserClassReply
		CreateClassReq
		JoinClassReq
		InvitationReq
		StudentInfo
		QueryClassUserInfoReply
		SearchClassesInfoReq
		SearchClassesInfoReply
		QueryFormListReply
		DeleteStudentReq
		QueryStudentInClassReq
		DeleteClassReq
		CollegeInfoReq
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "knowledgemap_backend/microservices/knowledgemap/user/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClassReq struct {
	Classid string `protobuf:"bytes,1,opt,name=classid,proto3" json:"classid" form:"classid"`
	Page    int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page" form:"page"`
}

func (m *ClassReq) Reset()                    { *m = ClassReq{} }
func (m *ClassReq) String() string            { return proto.CompactTextString(m) }
func (*ClassReq) ProtoMessage()               {}
func (*ClassReq) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{0} }

func (m *ClassReq) GetClassid() string {
	if m != nil {
		return m.Classid
	}
	return ""
}

func (m *ClassReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ClassReply struct {
	Classid      string `protobuf:"bytes,1,opt,name=classid,proto3" json:"classid" bson:"_id",form:"_id"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Subject      string `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject"`
	Course       string `protobuf:"bytes,4,opt,name=course,proto3" json:"course"`
	College      string `protobuf:"bytes,5,opt,name=college,proto3" json:"college"`
	Teachername  string `protobuf:"bytes,6,opt,name=teachername,proto3" json:"teachername"`
	Createtime   int64  `protobuf:"varint,7,opt,name=createtime,proto3" json:"createtime"`
	Number       string `protobuf:"bytes,8,opt,name=number,proto3" json:"number"`
	Introduction string `protobuf:"bytes,9,opt,name=introduction,proto3" json:"introduction"`
	Teacherid    string `protobuf:"bytes,10,opt,name=teacherid,proto3" json:"teacherid"`
	Inclass      bool   `protobuf:"varint,11,opt,name=inclass,proto3" json:"inclass"`
}

func (m *ClassReply) Reset()                    { *m = ClassReply{} }
func (m *ClassReply) String() string            { return proto.CompactTextString(m) }
func (*ClassReply) ProtoMessage()               {}
func (*ClassReply) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{1} }

func (m *ClassReply) GetClassid() string {
	if m != nil {
		return m.Classid
	}
	return ""
}

func (m *ClassReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClassReply) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *ClassReply) GetCourse() string {
	if m != nil {
		return m.Course
	}
	return ""
}

func (m *ClassReply) GetCollege() string {
	if m != nil {
		return m.College
	}
	return ""
}

func (m *ClassReply) GetTeachername() string {
	if m != nil {
		return m.Teachername
	}
	return ""
}

func (m *ClassReply) GetCreatetime() int64 {
	if m != nil {
		return m.Createtime
	}
	return 0
}

func (m *ClassReply) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *ClassReply) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *ClassReply) GetTeacherid() string {
	if m != nil {
		return m.Teacherid
	}
	return ""
}

func (m *ClassReply) GetInclass() bool {
	if m != nil {
		return m.Inclass
	}
	return false
}

type UserClassReply struct {
	Classes []*ClassReply `protobuf:"bytes,1,rep,name=classes" json:"classes"`
}

func (m *UserClassReply) Reset()                    { *m = UserClassReply{} }
func (m *UserClassReply) String() string            { return proto.CompactTextString(m) }
func (*UserClassReply) ProtoMessage()               {}
func (*UserClassReply) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{2} }

func (m *UserClassReply) GetClasses() []*ClassReply {
	if m != nil {
		return m.Classes
	}
	return nil
}

type CreateClassReq struct {
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" form:"name"`
	Subject      string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject" form:"subject"`
	Course       string `protobuf:"bytes,3,opt,name=course,proto3" json:"course" form:"course"`
	College      string `protobuf:"bytes,4,opt,name=college,proto3" json:"college" form:"college"`
	Teachername  string `protobuf:"bytes,5,opt,name=teachername,proto3" json:"teachername" form:"teachername"`
	Teacherid    string `protobuf:"bytes,6,opt,name=teacherid,proto3" json:"teacherid" form:"teacherid"`
	Introduction string `protobuf:"bytes,7,opt,name=introduction,proto3" json:"introduction" form:"introduction"`
}

func (m *CreateClassReq) Reset()                    { *m = CreateClassReq{} }
func (m *CreateClassReq) String() string            { return proto.CompactTextString(m) }
func (*CreateClassReq) ProtoMessage()               {}
func (*CreateClassReq) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{3} }

func (m *CreateClassReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClassReq) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *CreateClassReq) GetCourse() string {
	if m != nil {
		return m.Course
	}
	return ""
}

func (m *CreateClassReq) GetCollege() string {
	if m != nil {
		return m.College
	}
	return ""
}

func (m *CreateClassReq) GetTeachername() string {
	if m != nil {
		return m.Teachername
	}
	return ""
}

func (m *CreateClassReq) GetTeacherid() string {
	if m != nil {
		return m.Teacherid
	}
	return ""
}

func (m *CreateClassReq) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

type JoinClassReq struct {
	Userid    string `protobuf:"bytes,1,opt,name=userid,proto3" json:"uid" form:"userid"`
	Classid   string `protobuf:"bytes,2,opt,name=classid,proto3" json:"classid" form:"classid"`
	Username  string `protobuf:"bytes,3,opt,name=username,proto3" json:"username" form:"username"`
	Indentify string `protobuf:"bytes,4,opt,name=indentify,proto3" json:"indentify" form:"indentify"`
}

func (m *JoinClassReq) Reset()                    { *m = JoinClassReq{} }
func (m *JoinClassReq) String() string            { return proto.CompactTextString(m) }
func (*JoinClassReq) ProtoMessage()               {}
func (*JoinClassReq) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{4} }

func (m *JoinClassReq) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *JoinClassReq) GetClassid() string {
	if m != nil {
		return m.Classid
	}
	return ""
}

func (m *JoinClassReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *JoinClassReq) GetIndentify() string {
	if m != nil {
		return m.Indentify
	}
	return ""
}

type InvitationReq struct {
	Classid       string `protobuf:"bytes,1,opt,name=classid,proto3" json:"classid" form:"classid"`
	Invitaioncode string `protobuf:"bytes,2,opt,name=invitaioncode,proto3" json:"invitaioncode" form:"invitationcode"`
	Userid        string `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid" form:"userid"`
}

func (m *InvitationReq) Reset()                    { *m = InvitationReq{} }
func (m *InvitationReq) String() string            { return proto.CompactTextString(m) }
func (*InvitationReq) ProtoMessage()               {}
func (*InvitationReq) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{5} }

func (m *InvitationReq) GetClassid() string {
	if m != nil {
		return m.Classid
	}
	return ""
}

func (m *InvitationReq) GetInvitaioncode() string {
	if m != nil {
		return m.Invitaioncode
	}
	return ""
}

func (m *InvitationReq) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type StudentInfo struct {
	Userid     string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid"`
	Username   string `protobuf:"bytes,2,opt,name=username,proto3" json:"username"`
	Number     string `protobuf:"bytes,3,opt,name=number,proto3" json:"number"`
	Account    string `protobuf:"bytes,4,opt,name=account,proto3" json:"account"`
	Sex        string `protobuf:"bytes,5,opt,name=sex,proto3" json:"sex"`
	College    string `protobuf:"bytes,6,opt,name=college,proto3" json:"college"`
	Createtime int64  `protobuf:"varint,7,opt,name=createtime,proto3" json:"createtime"`
	Status     int64  `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
}

func (m *StudentInfo) Reset()                    { *m = StudentInfo{} }
func (m *StudentInfo) String() string            { return proto.CompactTextString(m) }
func (*StudentInfo) ProtoMessage()               {}
func (*StudentInfo) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{6} }

func (m *StudentInfo) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *StudentInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *StudentInfo) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *StudentInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *StudentInfo) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *StudentInfo) GetCollege() string {
	if m != nil {
		return m.College
	}
	return ""
}

func (m *StudentInfo) GetCreatetime() int64 {
	if m != nil {
		return m.Createtime
	}
	return 0
}

func (m *StudentInfo) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type QueryClassUserInfoReply struct {
	Classid     string         `protobuf:"bytes,1,opt,name=classid,proto3" json:"classid"`
	Students    []*StudentInfo `protobuf:"bytes,2,rep,name=students" json:"students"`
	Currentpage int64          `protobuf:"varint,3,opt,name=currentpage,proto3" json:"currentpage" form:"currentpage"`
	Totalpage   int64          `protobuf:"varint,4,opt,name=totalpage,proto3" json:"totalpage" form:"totalpage"`
}

func (m *QueryClassUserInfoReply) Reset()                    { *m = QueryClassUserInfoReply{} }
func (m *QueryClassUserInfoReply) String() string            { return proto.CompactTextString(m) }
func (*QueryClassUserInfoReply) ProtoMessage()               {}
func (*QueryClassUserInfoReply) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{7} }

func (m *QueryClassUserInfoReply) GetClassid() string {
	if m != nil {
		return m.Classid
	}
	return ""
}

func (m *QueryClassUserInfoReply) GetStudents() []*StudentInfo {
	if m != nil {
		return m.Students
	}
	return nil
}

func (m *QueryClassUserInfoReply) GetCurrentpage() int64 {
	if m != nil {
		return m.Currentpage
	}
	return 0
}

func (m *QueryClassUserInfoReply) GetTotalpage() int64 {
	if m != nil {
		return m.Totalpage
	}
	return 0
}

type SearchClassesInfoReq struct {
	Page        int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page" form:"page"`
	Course      string `protobuf:"bytes,2,opt,name=course,proto3" json:"course" form:"course"`
	Subject     string `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject" form:"subject"`
	College     string `protobuf:"bytes,4,opt,name=college,proto3" json:"college" form:"college"`
	Teachername string `protobuf:"bytes,5,opt,name=teachername,proto3" json:"teachername" form:"teachername"`
	Userid      string `protobuf:"bytes,6,opt,name=userid,proto3" json:"userid" form:"userid"`
}

func (m *SearchClassesInfoReq) Reset()                    { *m = SearchClassesInfoReq{} }
func (m *SearchClassesInfoReq) String() string            { return proto.CompactTextString(m) }
func (*SearchClassesInfoReq) ProtoMessage()               {}
func (*SearchClassesInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{8} }

func (m *SearchClassesInfoReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchClassesInfoReq) GetCourse() string {
	if m != nil {
		return m.Course
	}
	return ""
}

func (m *SearchClassesInfoReq) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *SearchClassesInfoReq) GetCollege() string {
	if m != nil {
		return m.College
	}
	return ""
}

func (m *SearchClassesInfoReq) GetTeachername() string {
	if m != nil {
		return m.Teachername
	}
	return ""
}

func (m *SearchClassesInfoReq) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SearchClassesInfoReply struct {
	Classes     []*ClassReply `protobuf:"bytes,1,rep,name=classes" json:"classes"`
	Currentpage int64         `protobuf:"varint,2,opt,name=currentpage,proto3" json:"currentpage" form:"currentpage"`
	Totalpage   int64         `protobuf:"varint,3,opt,name=totalpage,proto3" json:"totalpage" form:"totalpage"`
}

func (m *SearchClassesInfoReply) Reset()                    { *m = SearchClassesInfoReply{} }
func (m *SearchClassesInfoReply) String() string            { return proto.CompactTextString(m) }
func (*SearchClassesInfoReply) ProtoMessage()               {}
func (*SearchClassesInfoReply) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{9} }

func (m *SearchClassesInfoReply) GetClasses() []*ClassReply {
	if m != nil {
		return m.Classes
	}
	return nil
}

func (m *SearchClassesInfoReply) GetCurrentpage() int64 {
	if m != nil {
		return m.Currentpage
	}
	return 0
}

func (m *SearchClassesInfoReply) GetTotalpage() int64 {
	if m != nil {
		return m.Totalpage
	}
	return 0
}

type QueryFormListReply struct {
	Colleges []string `protobuf:"bytes,1,rep,name=colleges" json:"colleges" form:"colleges"`
	Subjects []string `protobuf:"bytes,2,rep,name=subjects" json:"subjects" form:"subjects"`
	Courses  []string `protobuf:"bytes,3,rep,name=courses" json:"courses" form:"courses"`
}

func (m *QueryFormListReply) Reset()                    { *m = QueryFormListReply{} }
func (m *QueryFormListReply) String() string            { return proto.CompactTextString(m) }
func (*QueryFormListReply) ProtoMessage()               {}
func (*QueryFormListReply) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{10} }

func (m *QueryFormListReply) GetColleges() []string {
	if m != nil {
		return m.Colleges
	}
	return nil
}

func (m *QueryFormListReply) GetSubjects() []string {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *QueryFormListReply) GetCourses() []string {
	if m != nil {
		return m.Courses
	}
	return nil
}

type DeleteStudentReq struct {
	Userid  string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid" form:"userid"`
	Classid string `protobuf:"bytes,2,opt,name=classid,proto3" json:"classid" form:"classid"`
}

func (m *DeleteStudentReq) Reset()                    { *m = DeleteStudentReq{} }
func (m *DeleteStudentReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteStudentReq) ProtoMessage()               {}
func (*DeleteStudentReq) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{11} }

func (m *DeleteStudentReq) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *DeleteStudentReq) GetClassid() string {
	if m != nil {
		return m.Classid
	}
	return ""
}

type QueryStudentInClassReq struct {
	Classid  string `protobuf:"bytes,1,opt,name=classid,proto3" json:"classid" form:"classid"`
	Page     int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page" form:"page"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username" form:"username"`
}

func (m *QueryStudentInClassReq) Reset()                    { *m = QueryStudentInClassReq{} }
func (m *QueryStudentInClassReq) String() string            { return proto.CompactTextString(m) }
func (*QueryStudentInClassReq) ProtoMessage()               {}
func (*QueryStudentInClassReq) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{12} }

func (m *QueryStudentInClassReq) GetClassid() string {
	if m != nil {
		return m.Classid
	}
	return ""
}

func (m *QueryStudentInClassReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryStudentInClassReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type DeleteClassReq struct {
	Userid  string `protobuf:"bytes,1,opt,name=userid,proto3" json:"uid" form:"userid"`
	Classid string `protobuf:"bytes,2,opt,name=classid,proto3" json:"classid" form:"classid"`
}

func (m *DeleteClassReq) Reset()                    { *m = DeleteClassReq{} }
func (m *DeleteClassReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteClassReq) ProtoMessage()               {}
func (*DeleteClassReq) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{13} }

func (m *DeleteClassReq) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *DeleteClassReq) GetClassid() string {
	if m != nil {
		return m.Classid
	}
	return ""
}

type CollegeInfoReq struct {
	College string                             `protobuf:"bytes,1,opt,name=college,proto3" json:"college" form:"college"`
	Info    map[string]*CollegeInfoReq_Courses `protobuf:"bytes,2,rep,name=info" json:"info" form:"info" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CollegeInfoReq) Reset()                    { *m = CollegeInfoReq{} }
func (m *CollegeInfoReq) String() string            { return proto.CompactTextString(m) }
func (*CollegeInfoReq) ProtoMessage()               {}
func (*CollegeInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{14} }

func (m *CollegeInfoReq) GetCollege() string {
	if m != nil {
		return m.College
	}
	return ""
}

func (m *CollegeInfoReq) GetInfo() map[string]*CollegeInfoReq_Courses {
	if m != nil {
		return m.Info
	}
	return nil
}

type CollegeInfoReq_Courses struct {
	Courses []string `protobuf:"bytes,1,rep,name=courses" json:"courses" form:"courses"`
}

func (m *CollegeInfoReq_Courses) Reset()                    { *m = CollegeInfoReq_Courses{} }
func (m *CollegeInfoReq_Courses) String() string            { return proto.CompactTextString(m) }
func (*CollegeInfoReq_Courses) ProtoMessage()               {}
func (*CollegeInfoReq_Courses) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{14, 0} }

func (m *CollegeInfoReq_Courses) GetCourses() []string {
	if m != nil {
		return m.Courses
	}
	return nil
}

func init() {
	proto.RegisterType((*ClassReq)(nil), "api.ClassReq")
	proto.RegisterType((*ClassReply)(nil), "api.ClassReply")
	proto.RegisterType((*UserClassReply)(nil), "api.UserClassReply")
	proto.RegisterType((*CreateClassReq)(nil), "api.CreateClassReq")
	proto.RegisterType((*JoinClassReq)(nil), "api.JoinClassReq")
	proto.RegisterType((*InvitationReq)(nil), "api.InvitationReq")
	proto.RegisterType((*StudentInfo)(nil), "api.StudentInfo")
	proto.RegisterType((*QueryClassUserInfoReply)(nil), "api.QueryClassUserInfoReply")
	proto.RegisterType((*SearchClassesInfoReq)(nil), "api.SearchClassesInfoReq")
	proto.RegisterType((*SearchClassesInfoReply)(nil), "api.SearchClassesInfoReply")
	proto.RegisterType((*QueryFormListReply)(nil), "api.QueryFormListReply")
	proto.RegisterType((*DeleteStudentReq)(nil), "api.DeleteStudentReq")
	proto.RegisterType((*QueryStudentInClassReq)(nil), "api.QueryStudentInClassReq")
	proto.RegisterType((*DeleteClassReq)(nil), "api.DeleteClassReq")
	proto.RegisterType((*CollegeInfoReq)(nil), "api.CollegeInfoReq")
	proto.RegisterType((*CollegeInfoReq_Courses)(nil), "api.CollegeInfoReq.Courses")
}
func (m *ClassReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Classid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Classid)))
		i += copy(dAtA[i:], m.Classid)
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClass(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *ClassReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Classid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Classid)))
		i += copy(dAtA[i:], m.Classid)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Subject) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Subject)))
		i += copy(dAtA[i:], m.Subject)
	}
	if len(m.Course) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Course)))
		i += copy(dAtA[i:], m.Course)
	}
	if len(m.College) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.College)))
		i += copy(dAtA[i:], m.College)
	}
	if len(m.Teachername) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Teachername)))
		i += copy(dAtA[i:], m.Teachername)
	}
	if m.Createtime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintClass(dAtA, i, uint64(m.Createtime))
	}
	if len(m.Number) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Number)))
		i += copy(dAtA[i:], m.Number)
	}
	if len(m.Introduction) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Introduction)))
		i += copy(dAtA[i:], m.Introduction)
	}
	if len(m.Teacherid) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Teacherid)))
		i += copy(dAtA[i:], m.Teacherid)
	}
	if m.Inclass {
		dAtA[i] = 0x58
		i++
		if m.Inclass {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UserClassReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserClassReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Classes) > 0 {
		for _, msg := range m.Classes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintClass(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateClassReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClassReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Subject) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Subject)))
		i += copy(dAtA[i:], m.Subject)
	}
	if len(m.Course) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Course)))
		i += copy(dAtA[i:], m.Course)
	}
	if len(m.College) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.College)))
		i += copy(dAtA[i:], m.College)
	}
	if len(m.Teachername) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Teachername)))
		i += copy(dAtA[i:], m.Teachername)
	}
	if len(m.Teacherid) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Teacherid)))
		i += copy(dAtA[i:], m.Teacherid)
	}
	if len(m.Introduction) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Introduction)))
		i += copy(dAtA[i:], m.Introduction)
	}
	return i, nil
}

func (m *JoinClassReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinClassReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Classid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Classid)))
		i += copy(dAtA[i:], m.Classid)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Indentify) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Indentify)))
		i += copy(dAtA[i:], m.Indentify)
	}
	return i, nil
}

func (m *InvitationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvitationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Classid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Classid)))
		i += copy(dAtA[i:], m.Classid)
	}
	if len(m.Invitaioncode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Invitaioncode)))
		i += copy(dAtA[i:], m.Invitaioncode)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *StudentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Number) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Number)))
		i += copy(dAtA[i:], m.Number)
	}
	if len(m.Account) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.Sex) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Sex)))
		i += copy(dAtA[i:], m.Sex)
	}
	if len(m.College) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.College)))
		i += copy(dAtA[i:], m.College)
	}
	if m.Createtime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintClass(dAtA, i, uint64(m.Createtime))
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintClass(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *QueryClassUserInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassUserInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Classid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Classid)))
		i += copy(dAtA[i:], m.Classid)
	}
	if len(m.Students) > 0 {
		for _, msg := range m.Students {
			dAtA[i] = 0x12
			i++
			i = encodeVarintClass(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Currentpage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClass(dAtA, i, uint64(m.Currentpage))
	}
	if m.Totalpage != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintClass(dAtA, i, uint64(m.Totalpage))
	}
	return i, nil
}

func (m *SearchClassesInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchClassesInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClass(dAtA, i, uint64(m.Page))
	}
	if len(m.Course) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Course)))
		i += copy(dAtA[i:], m.Course)
	}
	if len(m.Subject) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Subject)))
		i += copy(dAtA[i:], m.Subject)
	}
	if len(m.College) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.College)))
		i += copy(dAtA[i:], m.College)
	}
	if len(m.Teachername) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Teachername)))
		i += copy(dAtA[i:], m.Teachername)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SearchClassesInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchClassesInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Classes) > 0 {
		for _, msg := range m.Classes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintClass(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Currentpage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClass(dAtA, i, uint64(m.Currentpage))
	}
	if m.Totalpage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClass(dAtA, i, uint64(m.Totalpage))
	}
	return i, nil
}

func (m *QueryFormListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFormListReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Colleges) > 0 {
		for _, s := range m.Colleges {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Subjects) > 0 {
		for _, s := range m.Subjects {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Courses) > 0 {
		for _, s := range m.Courses {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DeleteStudentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStudentReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Classid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Classid)))
		i += copy(dAtA[i:], m.Classid)
	}
	return i, nil
}

func (m *QueryStudentInClassReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStudentInClassReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Classid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Classid)))
		i += copy(dAtA[i:], m.Classid)
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClass(dAtA, i, uint64(m.Page))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func (m *DeleteClassReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteClassReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Classid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Classid)))
		i += copy(dAtA[i:], m.Classid)
	}
	return i, nil
}

func (m *CollegeInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollegeInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.College) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.College)))
		i += copy(dAtA[i:], m.College)
	}
	if len(m.Info) > 0 {
		for k, _ := range m.Info {
			dAtA[i] = 0x12
			i++
			v := m.Info[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovClass(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovClass(uint64(len(k))) + msgSize
			i = encodeVarintClass(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintClass(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintClass(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *CollegeInfoReq_Courses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollegeInfoReq_Courses) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Courses) > 0 {
		for _, s := range m.Courses {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintClass(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClassReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Classid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovClass(uint64(m.Page))
	}
	return n
}

func (m *ClassReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Classid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Course)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.College)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Teachername)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.Createtime != 0 {
		n += 1 + sovClass(uint64(m.Createtime))
	}
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Introduction)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Teacherid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.Inclass {
		n += 2
	}
	return n
}

func (m *UserClassReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Classes) > 0 {
		for _, e := range m.Classes {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *CreateClassReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Course)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.College)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Teachername)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Teacherid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Introduction)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *JoinClassReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Classid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Indentify)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *InvitationReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Classid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Invitaioncode)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *StudentInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.College)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.Createtime != 0 {
		n += 1 + sovClass(uint64(m.Createtime))
	}
	if m.Status != 0 {
		n += 1 + sovClass(uint64(m.Status))
	}
	return n
}

func (m *QueryClassUserInfoReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Classid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if len(m.Students) > 0 {
		for _, e := range m.Students {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	if m.Currentpage != 0 {
		n += 1 + sovClass(uint64(m.Currentpage))
	}
	if m.Totalpage != 0 {
		n += 1 + sovClass(uint64(m.Totalpage))
	}
	return n
}

func (m *SearchClassesInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovClass(uint64(m.Page))
	}
	l = len(m.Course)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.College)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Teachername)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *SearchClassesInfoReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Classes) > 0 {
		for _, e := range m.Classes {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	if m.Currentpage != 0 {
		n += 1 + sovClass(uint64(m.Currentpage))
	}
	if m.Totalpage != 0 {
		n += 1 + sovClass(uint64(m.Totalpage))
	}
	return n
}

func (m *QueryFormListReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Colleges) > 0 {
		for _, s := range m.Colleges {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	if len(m.Subjects) > 0 {
		for _, s := range m.Subjects {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	if len(m.Courses) > 0 {
		for _, s := range m.Courses {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *DeleteStudentReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Classid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *QueryStudentInClassReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Classid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovClass(uint64(m.Page))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *DeleteClassReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Classid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *CollegeInfoReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.College)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if len(m.Info) > 0 {
		for k, v := range m.Info {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovClass(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovClass(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovClass(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CollegeInfoReq_Courses) Size() (n int) {
	var l int
	_ = l
	if len(m.Courses) > 0 {
		for _, s := range m.Courses {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func sovClass(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClass(x uint64) (n int) {
	return sovClass(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClassReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Course", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Course = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field College", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.College = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teachername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teachername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Createtime", wireType)
			}
			m.Createtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Createtime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teacherid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teacherid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inclass", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inclass = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserClassReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserClassReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserClassReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classes = append(m.Classes, &ClassReply{})
			if err := m.Classes[len(m.Classes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClassReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClassReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClassReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Course", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Course = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field College", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.College = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teachername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teachername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teacherid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teacherid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinClassReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinClassReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinClassReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indentify", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indentify = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvitationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvitationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvitationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invitaioncode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invitaioncode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field College", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.College = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Createtime", wireType)
			}
			m.Createtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Createtime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassUserInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassUserInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassUserInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Students", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Students = append(m.Students, &StudentInfo{})
			if err := m.Students[len(m.Students)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currentpage", wireType)
			}
			m.Currentpage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Currentpage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Totalpage", wireType)
			}
			m.Totalpage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Totalpage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchClassesInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchClassesInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchClassesInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Course", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Course = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field College", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.College = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teachername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teachername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchClassesInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchClassesInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchClassesInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classes = append(m.Classes, &ClassReply{})
			if err := m.Classes[len(m.Classes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currentpage", wireType)
			}
			m.Currentpage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Currentpage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Totalpage", wireType)
			}
			m.Totalpage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Totalpage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFormListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFormListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFormListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colleges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Colleges = append(m.Colleges, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Courses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Courses = append(m.Courses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStudentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStudentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStudentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStudentInClassReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStudentInClassReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStudentInClassReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteClassReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteClassReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteClassReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollegeInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollegeInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollegeInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field College", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.College = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = make(map[string]*CollegeInfoReq_Courses)
			}
			var mapkey string
			var mapvalue *CollegeInfoReq_Courses
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClass
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClass
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthClass
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClass
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthClass
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthClass
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CollegeInfoReq_Courses{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipClass(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthClass
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Info[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollegeInfoReq_Courses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Courses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Courses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Courses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Courses = append(m.Courses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClass(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClass
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClass
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClass
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClass
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClass
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClass(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClass = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClass   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/class.proto", fileDescriptorClass) }

var fileDescriptorClass = []byte{
	// 1295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x4b, 0x6f, 0x23, 0xc5,
	0x13, 0xf7, 0xd8, 0x8e, 0x1f, 0xe5, 0x38, 0x8f, 0xce, 0x6e, 0x32, 0xeb, 0xec, 0x3f, 0x8e, 0x7a,
	0x2f, 0x89, 0x94, 0x8d, 0x77, 0x93, 0x7d, 0x29, 0x7b, 0xf8, 0x4b, 0x36, 0x8b, 0x14, 0xc4, 0x1e,
	0x98, 0xc0, 0x11, 0x45, 0xe3, 0x71, 0xc7, 0x19, 0x62, 0xcf, 0x78, 0xe7, 0x11, 0xf0, 0xc7, 0xe0,
	0xc6, 0x81, 0x23, 0x12, 0xe2, 0xc8, 0x99, 0x2f, 0xc0, 0x0d, 0x24, 0x0e, 0x7b, 0xb3, 0x50, 0x38,
	0x20, 0x71, 0xf4, 0x27, 0x40, 0x5d, 0xdd, 0x33, 0xd3, 0x33, 0xf1, 0xe6, 0x81, 0x60, 0x4f, 0xee,
	0xee, 0xaa, 0xea, 0xea, 0xf9, 0xfd, 0xaa, 0x7e, 0xdd, 0x86, 0x45, 0x73, 0x64, 0xb7, 0xac, 0x81,
	0xe9, 0xfb, 0xbb, 0x23, 0xcf, 0x0d, 0x5c, 0x52, 0x30, 0x47, 0x76, 0xe3, 0x61, 0xdf, 0x0e, 0x4e,
	0xc3, 0xee, 0xae, 0xe5, 0x0e, 0x5b, 0x7d, 0xb7, 0xef, 0xb6, 0xd0, 0xd6, 0x0d, 0x4f, 0x70, 0x86,
	0x13, 0x1c, 0x89, 0x98, 0x46, 0xe7, 0xcc, 0x71, 0xbf, 0x1c, 0xb0, 0x5e, 0x9f, 0x0d, 0xcd, 0xd1,
	0x71, 0xd7, 0xb4, 0xce, 0x98, 0xd3, 0x6b, 0x0d, 0x6d, 0xcb, 0x73, 0x7d, 0xe6, 0x9d, 0xdb, 0x16,
	0xf3, 0x5b, 0xaa, 0x4b, 0x2b, 0xf4, 0x99, 0xd7, 0xe2, 0x99, 0xf9, 0x40, 0x6c, 0x42, 0x3f, 0x87,
	0x4a, 0x87, 0x9f, 0xc3, 0x60, 0x6f, 0xc8, 0x0e, 0x94, 0xf1, 0x4c, 0x76, 0x4f, 0xd7, 0x36, 0xb5,
	0xad, 0x6a, 0x9b, 0x4c, 0x27, 0xcd, 0x85, 0x13, 0xd7, 0x1b, 0x1e, 0x50, 0x69, 0xa0, 0x46, 0xe4,
	0x42, 0x1e, 0x40, 0x71, 0x64, 0xf6, 0x99, 0x9e, 0xdf, 0xd4, 0xb6, 0x0a, 0xed, 0xc5, 0xe9, 0xa4,
	0x59, 0x13, 0xae, 0x7c, 0x95, 0x1a, 0x68, 0xa4, 0x6f, 0xf3, 0x00, 0x72, 0xff, 0xd1, 0x60, 0x4c,
	0xf6, 0xb3, 0x19, 0xee, 0x4d, 0x27, 0xcd, 0xbb, 0x5d, 0xdf, 0x75, 0x0e, 0xe8, 0xb1, 0xdd, 0xa3,
	0x3b, 0x62, 0x87, 0xe3, 0x54, 0x22, 0x02, 0x45, 0xc7, 0x1c, 0x8a, 0x44, 0x55, 0x03, 0xc7, 0x44,
	0x87, 0xb2, 0x1f, 0x76, 0xbf, 0x60, 0x56, 0xa0, 0x17, 0x70, 0x39, 0x9a, 0x92, 0x55, 0x28, 0x59,
	0x6e, 0xe8, 0xf9, 0x4c, 0x2f, 0xa2, 0x41, 0xce, 0x78, 0x84, 0xe5, 0x0e, 0x06, 0xac, 0xcf, 0xf4,
	0x39, 0x11, 0x21, 0xa7, 0x64, 0x13, 0x6a, 0x01, 0x33, 0xad, 0x53, 0xe6, 0x61, 0x9a, 0x12, 0x5a,
	0xd5, 0x25, 0xb2, 0x01, 0x60, 0x79, 0xcc, 0x0c, 0x58, 0x60, 0x0f, 0x99, 0x5e, 0xe6, 0x1f, 0x6c,
	0x28, 0x2b, 0x3c, 0xa7, 0x13, 0x0e, 0xbb, 0xcc, 0xd3, 0x2b, 0x22, 0xa7, 0x98, 0x11, 0x0a, 0xf3,
	0xb6, 0x13, 0x78, 0x6e, 0x2f, 0xb4, 0x02, 0xdb, 0x75, 0xf4, 0x2a, 0x5a, 0x53, 0x6b, 0xe4, 0x3e,
	0x54, 0x65, 0x2a, 0xbb, 0xa7, 0x03, 0x3a, 0x24, 0x0b, 0xfc, 0xd4, 0xb6, 0x83, 0x40, 0xe8, 0xb5,
	0x4d, 0x6d, 0xab, 0x62, 0x44, 0x53, 0xfa, 0x12, 0x16, 0x3e, 0xf3, 0x99, 0xa7, 0x80, 0xbb, 0x2d,
	0xc1, 0x65, 0xbe, 0xae, 0x6d, 0x16, 0xb6, 0x6a, 0x7b, 0x8b, 0xbb, 0xe6, 0xc8, 0xde, 0x4d, 0x3c,
	0x8c, 0xc8, 0x4e, 0xff, 0xcc, 0xc3, 0x42, 0x07, 0xcf, 0x1f, 0x93, 0xff, 0x40, 0xa2, 0x2c, 0x78,
	0x51, 0xe8, 0xe4, 0xab, 0x54, 0xc2, 0xbe, 0x93, 0xc0, 0x9e, 0xcf, 0x56, 0x88, 0x34, 0xd0, 0x84,
	0x8a, 0xed, 0x98, 0x0a, 0xe4, 0xa8, 0xbd, 0x3c, 0x9d, 0x34, 0xeb, 0xb2, 0x9c, 0x70, 0x9d, 0xc6,
	0xec, 0xec, 0x24, 0xec, 0x14, 0x2f, 0x95, 0x9e, 0x30, 0xd0, 0x84, 0xb1, 0x17, 0x69, 0xc6, 0x90,
	0xcf, 0xf6, 0xea, 0x74, 0xd2, 0x24, 0x22, 0x42, 0x31, 0xd2, 0x34, 0x93, 0x7b, 0x2a, 0xda, 0xc8,
	0x74, 0xfb, 0xce, 0x74, 0xd2, 0x5c, 0x4a, 0xc5, 0xf1, 0xea, 0x53, 0x38, 0x78, 0x99, 0x61, 0xb1,
	0x8c, 0x61, 0x6b, 0xd3, 0x49, 0x73, 0x45, 0x84, 0xa9, 0x56, 0x9a, 0xa6, 0x97, 0xfe, 0xa6, 0xc1,
	0xfc, 0x47, 0xae, 0xed, 0xc4, 0x38, 0x3f, 0x82, 0x12, 0x6f, 0xbf, 0xb8, 0x03, 0xf4, 0xbf, 0x26,
	0xcd, 0x42, 0x68, 0xf7, 0x12, 0x6c, 0x84, 0x99, 0x1a, 0xd2, 0x4f, 0x6d, 0xcb, 0xfc, 0xf5, 0x6d,
	0xd9, 0x82, 0x0a, 0x8f, 0x43, 0x60, 0x04, 0xec, 0x2b, 0xd3, 0x49, 0x73, 0x31, 0xd9, 0x5a, 0xa0,
	0x12, 0x3b, 0x71, 0x48, 0x6c, 0xa7, 0xc7, 0x9c, 0xc0, 0x3e, 0x19, 0x4b, 0xf0, 0x15, 0x48, 0x62,
	0x13, 0x35, 0x12, 0x37, 0xfa, 0x83, 0x06, 0xf5, 0x43, 0xe7, 0xdc, 0x0e, 0x4c, 0xfe, 0x91, 0xb7,
	0xd7, 0x8e, 0xff, 0x43, 0xdd, 0xc6, 0x70, 0xdb, 0x75, 0x2c, 0xb7, 0x27, 0x7b, 0x5b, 0xa8, 0x41,
	0x94, 0x37, 0xda, 0x9d, 0xdb, 0xa9, 0x91, 0xf6, 0xe7, 0xa5, 0x25, 0x51, 0xbc, 0x54, 0x5a, 0x19,
	0xf8, 0xe8, 0x5b, 0x0d, 0x6a, 0x47, 0x41, 0xc8, 0x8f, 0x7e, 0xe8, 0x9c, 0xb8, 0xbc, 0x59, 0x55,
	0x02, 0x62, 0x98, 0x1b, 0x0a, 0x70, 0x42, 0x6a, 0x12, 0x8c, 0x92, 0x06, 0x2f, 0xa4, 0x1a, 0x5c,
	0x87, 0xb2, 0x69, 0x59, 0x6e, 0xe8, 0x04, 0x52, 0x6d, 0xa2, 0x29, 0x59, 0x82, 0x82, 0xcf, 0xbe,
	0x92, 0x52, 0xc3, 0x87, 0xaa, 0x00, 0x95, 0xd2, 0x02, 0x74, 0x03, 0x79, 0xf1, 0x03, 0x33, 0x08,
	0x7d, 0x94, 0x97, 0x82, 0x21, 0x67, 0xf4, 0x17, 0x0d, 0xd6, 0x3e, 0x09, 0x99, 0x37, 0xc6, 0xe2,
	0xe2, 0x6a, 0xc0, 0x3f, 0x50, 0x88, 0x81, 0x9e, 0xe1, 0x23, 0xc1, 0x7e, 0x07, 0x2a, 0xbe, 0x80,
	0xc3, 0xd7, 0xf3, 0xa8, 0x13, 0x4b, 0xa8, 0x13, 0x0a, 0x46, 0x46, 0xec, 0xc1, 0x5b, 0xcd, 0x0a,
	0x3d, 0x8f, 0x39, 0x01, 0x8a, 0x7d, 0x01, 0xc5, 0x5e, 0x69, 0x35, 0xc5, 0x48, 0x0d, 0xd5, 0x15,
	0x5b, 0xcd, 0x0d, 0xcc, 0x01, 0xc6, 0x15, 0x31, 0x4e, 0x6d, 0xb5, 0xc8, 0xc4, 0x5b, 0x2d, 0x1e,
	0x7f, 0x9f, 0x87, 0x3b, 0x47, 0xcc, 0xf4, 0xac, 0xd3, 0x8e, 0x50, 0x2a, 0xf1, 0x41, 0x6f, 0xe2,
	0xcb, 0x46, 0xbb, 0xe2, 0xb2, 0x51, 0xf4, 0x26, 0x7f, 0x03, 0xbd, 0x49, 0xdd, 0x1f, 0x57, 0x0b,
	0xd9, 0xfb, 0x52, 0xa7, 0xa4, 0xaa, 0x4b, 0xd7, 0x55, 0xf5, 0x8f, 0x1a, 0xac, 0xce, 0x40, 0xea,
	0x76, 0xf7, 0x40, 0x96, 0xdd, 0xfc, 0x3f, 0x64, 0xb7, 0x70, 0x33, 0x76, 0xbf, 0xd3, 0x80, 0x60,
	0xbd, 0x7e, 0xe8, 0x7a, 0xc3, 0x8f, 0x6d, 0x3f, 0x10, 0xe7, 0x6d, 0x41, 0x45, 0x42, 0x27, 0x0e,
	0x9c, 0x52, 0xac, 0xc8, 0x42, 0x8d, 0xd8, 0x89, 0x07, 0x48, 0x66, 0x44, 0x05, 0xa7, 0x02, 0x22,
	0x0b, 0x35, 0x62, 0x27, 0xc1, 0x1f, 0xe7, 0xdd, 0xd7, 0x0b, 0xe8, 0x9f, 0xe2, 0x0f, 0x0d, 0xc8,
	0x9f, 0x18, 0x9d, 0xc1, 0xd2, 0x07, 0x6c, 0xc0, 0x02, 0x26, 0x3b, 0x82, 0xd7, 0xdf, 0x76, 0x46,
	0xb5, 0x97, 0xff, 0x25, 0xb9, 0xa6, 0xdf, 0x6a, 0xb0, 0x8a, 0x98, 0xc4, 0xed, 0xf7, 0x1f, 0x3e,
	0xc7, 0x6e, 0x7d, 0x39, 0xd0, 0x11, 0x2c, 0x08, 0x2c, 0xde, 0xd7, 0xfd, 0x45, 0xbf, 0xe6, 0x4f,
	0x13, 0xc1, 0x74, 0xd4, 0xfc, 0x4a, 0xfb, 0x69, 0xd7, 0xb7, 0x5f, 0x1b, 0x8a, 0xb6, 0x73, 0xe2,
	0x4a, 0x6d, 0xfb, 0x9f, 0xa8, 0xfd, 0xd4, 0x86, 0xbb, 0xfc, 0xf7, 0x95, 0x13, 0x78, 0x63, 0x15,
	0x27, 0x1e, 0x44, 0x0d, 0x8c, 0x6d, 0x3c, 0x87, 0x72, 0x47, 0x54, 0x83, 0x5a, 0x3b, 0xda, 0xb5,
	0xb5, 0xd3, 0xf8, 0x14, 0xaa, 0xf1, 0xe6, 0xfc, 0x0e, 0x38, 0x63, 0x63, 0xa9, 0xbf, 0x7c, 0x48,
	0x1e, 0xc3, 0xdc, 0xb9, 0x39, 0x08, 0x05, 0x4b, 0xb5, 0xbd, 0xf5, 0x59, 0x87, 0x93, 0x89, 0x0d,
	0xe1, 0x79, 0x90, 0x7f, 0xa1, 0xed, 0xfd, 0x54, 0x82, 0x39, 0x24, 0x80, 0x3c, 0x85, 0x9a, 0xf2,
	0x6e, 0x23, 0x2b, 0x62, 0x83, 0xd4, 0x4b, 0xae, 0x91, 0x6d, 0x77, 0x9a, 0x23, 0x0f, 0xa1, 0x8a,
	0x73, 0xbc, 0x00, 0xeb, 0xaa, 0x7d, 0xa6, 0xfb, 0x53, 0xa8, 0xc6, 0x6f, 0x16, 0xb2, 0x8c, 0x76,
	0xf5, 0x0d, 0xd3, 0x10, 0x69, 0xd3, 0xcf, 0x4f, 0x9a, 0x23, 0x4f, 0xa0, 0x1e, 0xaf, 0x61, 0xa6,
	0xf9, 0xd8, 0xef, 0x8a, 0xa8, 0x8e, 0x14, 0x85, 0xd4, 0x25, 0x96, 0x3d, 0xe4, 0x7d, 0x9c, 0xbe,
	0xe3, 0xb2, 0xa3, 0x39, 0xf2, 0x1a, 0x96, 0x2f, 0xa9, 0x21, 0xb9, 0x27, 0xee, 0xb5, 0x19, 0xf7,
	0x49, 0x63, 0xfd, 0x5d, 0x26, 0xb1, 0xdd, 0x33, 0xa8, 0xa7, 0x84, 0x8a, 0x00, 0xfa, 0xbf, 0x1a,
	0x8e, 0x82, 0x71, 0x63, 0x2d, 0x39, 0x4b, 0x4a, 0xc8, 0x68, 0x8e, 0xec, 0xc3, 0xa2, 0x20, 0xe3,
	0x30, 0x7a, 0xad, 0x10, 0x82, 0xde, 0xa9, 0xc7, 0x52, 0x43, 0xd9, 0x8d, 0xe6, 0xc8, 0x63, 0xa8,
	0x1f, 0x05, 0xee, 0xe8, 0x36, 0x21, 0xcf, 0xa2, 0xe7, 0x97, 0xed, 0x3a, 0xf8, 0xa9, 0xb3, 0x42,
	0x66, 0x10, 0xfb, 0x04, 0xea, 0x29, 0x69, 0x23, 0x77, 0xd1, 0x27, 0x2b, 0x77, 0x99, 0x6c, 0x06,
	0xac, 0xcc, 0x90, 0x28, 0xb2, 0x9e, 0xe0, 0x70, 0x49, 0xbc, 0xae, 0x25, 0xec, 0x11, 0xd4, 0x14,
	0x61, 0x91, 0x85, 0x9c, 0x96, 0x9a, 0xcc, 0x29, 0x9e, 0xcb, 0x3a, 0x79, 0x3d, 0x96, 0x0d, 0xc3,
	0x3b, 0x35, 0x45, 0xcc, 0xca, 0x8c, 0x76, 0xa2, 0xb9, 0xf6, 0xd2, 0xcf, 0x17, 0x1b, 0xda, 0xaf,
	0x17, 0x1b, 0xda, 0xef, 0x17, 0x1b, 0xda, 0x37, 0x7f, 0x6c, 0xe4, 0xba, 0x25, 0xfc, 0xef, 0xbb,
	0xff, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x72, 0x7d, 0x8e, 0x87, 0x0f, 0x00, 0x00,
}
