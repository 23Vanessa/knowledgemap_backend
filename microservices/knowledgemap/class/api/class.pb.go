// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/class.proto

/*
	Package api is a generated protocol buffer package.

	It is generated from these files:
		api/class.proto

	It has these top-level messages:
		ClassReq
		ClassReply
		UserClassReply
		CreateClassReq
		JoinClassReq
		InvitationReq
		QueryClassUserInfoReply
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "knowledgemap_backend/microservices/knowledgemap/user/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClassReq struct {
	Classid string `protobuf:"bytes,1,opt,name=classid,proto3" json:"classid,omitempty" form:"classid"`
}

func (m *ClassReq) Reset()                    { *m = ClassReq{} }
func (m *ClassReq) String() string            { return proto.CompactTextString(m) }
func (*ClassReq) ProtoMessage()               {}
func (*ClassReq) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{0} }

func (m *ClassReq) GetClassid() string {
	if m != nil {
		return m.Classid
	}
	return ""
}

type ClassReply struct {
	Classid     string `protobuf:"bytes,1,opt,name=classid,proto3" json:"classid,omitempty" bson:"_id",form:"_id"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Major       string `protobuf:"bytes,3,opt,name=major,proto3" json:"major,omitempty"`
	College     string `protobuf:"bytes,4,opt,name=college,proto3" json:"college,omitempty"`
	Teachername string `protobuf:"bytes,5,opt,name=teachername,proto3" json:"teachername,omitempty"`
	CreateTime  int64  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Number      string `protobuf:"bytes,7,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *ClassReply) Reset()                    { *m = ClassReply{} }
func (m *ClassReply) String() string            { return proto.CompactTextString(m) }
func (*ClassReply) ProtoMessage()               {}
func (*ClassReply) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{1} }

func (m *ClassReply) GetClassid() string {
	if m != nil {
		return m.Classid
	}
	return ""
}

func (m *ClassReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClassReply) GetMajor() string {
	if m != nil {
		return m.Major
	}
	return ""
}

func (m *ClassReply) GetCollege() string {
	if m != nil {
		return m.College
	}
	return ""
}

func (m *ClassReply) GetTeachername() string {
	if m != nil {
		return m.Teachername
	}
	return ""
}

func (m *ClassReply) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *ClassReply) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

type UserClassReply struct {
	Classes []*ClassReply `protobuf:"bytes,1,rep,name=classes" json:"classes,omitempty"`
}

func (m *UserClassReply) Reset()                    { *m = UserClassReply{} }
func (m *UserClassReply) String() string            { return proto.CompactTextString(m) }
func (*UserClassReply) ProtoMessage()               {}
func (*UserClassReply) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{2} }

func (m *UserClassReply) GetClasses() []*ClassReply {
	if m != nil {
		return m.Classes
	}
	return nil
}

type CreateClassReq struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" form:"classname"`
	Major       string `protobuf:"bytes,2,opt,name=major,proto3" json:"major,omitempty" form:"major"`
	College     string `protobuf:"bytes,3,opt,name=college,proto3" json:"college,omitempty" form:"college"`
	Teachername string `protobuf:"bytes,4,opt,name=teachername,proto3" json:"teachername,omitempty" form:"teachername"`
	Teacherid   string `protobuf:"bytes,5,opt,name=teacherid,proto3" json:"teacherid,omitempty" form:"teacherid"`
}

func (m *CreateClassReq) Reset()                    { *m = CreateClassReq{} }
func (m *CreateClassReq) String() string            { return proto.CompactTextString(m) }
func (*CreateClassReq) ProtoMessage()               {}
func (*CreateClassReq) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{3} }

func (m *CreateClassReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClassReq) GetMajor() string {
	if m != nil {
		return m.Major
	}
	return ""
}

func (m *CreateClassReq) GetCollege() string {
	if m != nil {
		return m.College
	}
	return ""
}

func (m *CreateClassReq) GetTeachername() string {
	if m != nil {
		return m.Teachername
	}
	return ""
}

func (m *CreateClassReq) GetTeacherid() string {
	if m != nil {
		return m.Teacherid
	}
	return ""
}

type JoinClassReq struct {
	Userid   string `protobuf:"bytes,1,opt,name=userid,proto3" json:"uid" form:"userid"`
	Classid  string `protobuf:"bytes,2,opt,name=classid,proto3" json:"classid,omitempty" form:"classid"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty" form:"username"`
	Status   string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" form:"status"`
}

func (m *JoinClassReq) Reset()                    { *m = JoinClassReq{} }
func (m *JoinClassReq) String() string            { return proto.CompactTextString(m) }
func (*JoinClassReq) ProtoMessage()               {}
func (*JoinClassReq) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{4} }

func (m *JoinClassReq) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *JoinClassReq) GetClassid() string {
	if m != nil {
		return m.Classid
	}
	return ""
}

func (m *JoinClassReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *JoinClassReq) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type InvitationReq struct {
	Classid       string `protobuf:"bytes,1,opt,name=classid,proto3" json:"classid,omitempty" form:"classid"`
	Invitaioncode string `protobuf:"bytes,2,opt,name=invitaioncode,proto3" json:"invitaioncode,omitempty" form:"invitationcode"`
	Userid        string `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid,omitempty" form:"userid"`
}

func (m *InvitationReq) Reset()                    { *m = InvitationReq{} }
func (m *InvitationReq) String() string            { return proto.CompactTextString(m) }
func (*InvitationReq) ProtoMessage()               {}
func (*InvitationReq) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{5} }

func (m *InvitationReq) GetClassid() string {
	if m != nil {
		return m.Classid
	}
	return ""
}

func (m *InvitationReq) GetInvitaioncode() string {
	if m != nil {
		return m.Invitaioncode
	}
	return ""
}

func (m *InvitationReq) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type QueryClassUserInfoReply struct {
	Classid  string                                 `protobuf:"bytes,1,opt,name=classid,proto3" json:"classid,omitempty"`
	Students []*QueryClassUserInfoReply_StudentInfo `protobuf:"bytes,2,rep,name=students" json:"students,omitempty"`
}

func (m *QueryClassUserInfoReply) Reset()                    { *m = QueryClassUserInfoReply{} }
func (m *QueryClassUserInfoReply) String() string            { return proto.CompactTextString(m) }
func (*QueryClassUserInfoReply) ProtoMessage()               {}
func (*QueryClassUserInfoReply) Descriptor() ([]byte, []int) { return fileDescriptorClass, []int{6} }

func (m *QueryClassUserInfoReply) GetClassid() string {
	if m != nil {
		return m.Classid
	}
	return ""
}

func (m *QueryClassUserInfoReply) GetStudents() []*QueryClassUserInfoReply_StudentInfo {
	if m != nil {
		return m.Students
	}
	return nil
}

type QueryClassUserInfoReply_StudentInfo struct {
	Userid   string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *QueryClassUserInfoReply_StudentInfo) Reset()         { *m = QueryClassUserInfoReply_StudentInfo{} }
func (m *QueryClassUserInfoReply_StudentInfo) String() string { return proto.CompactTextString(m) }
func (*QueryClassUserInfoReply_StudentInfo) ProtoMessage()    {}
func (*QueryClassUserInfoReply_StudentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorClass, []int{6, 0}
}

func (m *QueryClassUserInfoReply_StudentInfo) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *QueryClassUserInfoReply_StudentInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func init() {
	proto.RegisterType((*ClassReq)(nil), "api.ClassReq")
	proto.RegisterType((*ClassReply)(nil), "api.ClassReply")
	proto.RegisterType((*UserClassReply)(nil), "api.UserClassReply")
	proto.RegisterType((*CreateClassReq)(nil), "api.CreateClassReq")
	proto.RegisterType((*JoinClassReq)(nil), "api.JoinClassReq")
	proto.RegisterType((*InvitationReq)(nil), "api.InvitationReq")
	proto.RegisterType((*QueryClassUserInfoReply)(nil), "api.QueryClassUserInfoReply")
	proto.RegisterType((*QueryClassUserInfoReply_StudentInfo)(nil), "api.QueryClassUserInfoReply.StudentInfo")
}
func (m *ClassReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Classid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Classid)))
		i += copy(dAtA[i:], m.Classid)
	}
	return i, nil
}

func (m *ClassReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Classid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Classid)))
		i += copy(dAtA[i:], m.Classid)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Major) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Major)))
		i += copy(dAtA[i:], m.Major)
	}
	if len(m.College) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.College)))
		i += copy(dAtA[i:], m.College)
	}
	if len(m.Teachername) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Teachername)))
		i += copy(dAtA[i:], m.Teachername)
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintClass(dAtA, i, uint64(m.CreateTime))
	}
	if len(m.Number) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Number)))
		i += copy(dAtA[i:], m.Number)
	}
	return i, nil
}

func (m *UserClassReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserClassReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Classes) > 0 {
		for _, msg := range m.Classes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintClass(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateClassReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClassReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Major) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Major)))
		i += copy(dAtA[i:], m.Major)
	}
	if len(m.College) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.College)))
		i += copy(dAtA[i:], m.College)
	}
	if len(m.Teachername) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Teachername)))
		i += copy(dAtA[i:], m.Teachername)
	}
	if len(m.Teacherid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Teacherid)))
		i += copy(dAtA[i:], m.Teacherid)
	}
	return i, nil
}

func (m *JoinClassReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinClassReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Classid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Classid)))
		i += copy(dAtA[i:], m.Classid)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	return i, nil
}

func (m *InvitationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvitationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Classid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Classid)))
		i += copy(dAtA[i:], m.Classid)
	}
	if len(m.Invitaioncode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Invitaioncode)))
		i += copy(dAtA[i:], m.Invitaioncode)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *QueryClassUserInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassUserInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Classid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Classid)))
		i += copy(dAtA[i:], m.Classid)
	}
	if len(m.Students) > 0 {
		for _, msg := range m.Students {
			dAtA[i] = 0x12
			i++
			i = encodeVarintClass(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QueryClassUserInfoReply_StudentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassUserInfoReply_StudentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClass(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func encodeVarintClass(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClassReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Classid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *ClassReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Classid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Major)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.College)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Teachername)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovClass(uint64(m.CreateTime))
	}
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *UserClassReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Classes) > 0 {
		for _, e := range m.Classes {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *CreateClassReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Major)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.College)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Teachername)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Teacherid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *JoinClassReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Classid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *InvitationReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Classid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Invitaioncode)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *QueryClassUserInfoReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Classid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if len(m.Students) > 0 {
		for _, e := range m.Students {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *QueryClassUserInfoReply_StudentInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func sovClass(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClass(x uint64) (n int) {
	return sovClass(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClassReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Major = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field College", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.College = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teachername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teachername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserClassReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserClassReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserClassReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classes = append(m.Classes, &ClassReply{})
			if err := m.Classes[len(m.Classes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClassReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClassReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClassReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Major = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field College", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.College = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teachername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teachername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teacherid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teacherid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinClassReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinClassReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinClassReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvitationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvitationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvitationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invitaioncode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invitaioncode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassUserInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassUserInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassUserInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Students", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Students = append(m.Students, &QueryClassUserInfoReply_StudentInfo{})
			if err := m.Students[len(m.Students)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassUserInfoReply_StudentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClass(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClass
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClass
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClass
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClass
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClass
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClass(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClass = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClass   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/class.proto", fileDescriptorClass) }

var fileDescriptorClass = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x8e, 0x31, 0x04, 0x72, 0x42, 0x08, 0x0c, 0x5c, 0xae, 0x6f, 0x74, 0x15, 0x47, 0xb3, 0xa8,
	0x82, 0x04, 0x71, 0x0b, 0xa5, 0x42, 0x74, 0x51, 0x35, 0x69, 0x17, 0x74, 0x57, 0xd3, 0xae, 0x91,
	0x63, 0x0f, 0x61, 0x4a, 0xec, 0x71, 0xfd, 0x43, 0xc5, 0x9b, 0xf4, 0x15, 0xfa, 0x0e, 0x95, 0xba,
	0xad, 0xba, 0xea, 0x13, 0xb8, 0x15, 0xdd, 0x75, 0x99, 0x07, 0xa8, 0x2a, 0x9f, 0x71, 0x1c, 0x27,
	0x50, 0x2a, 0x76, 0x3e, 0xe7, 0x3b, 0xdf, 0x99, 0x33, 0xdf, 0x7c, 0x27, 0x81, 0xba, 0xe5, 0x73,
	0xc3, 0x1e, 0x5a, 0x61, 0xd8, 0xf1, 0x03, 0x11, 0x09, 0xa2, 0x5a, 0x3e, 0x6f, 0xec, 0x0c, 0x78,
	0x74, 0x16, 0xf7, 0x3b, 0xb6, 0x70, 0x8d, 0x81, 0x18, 0x08, 0x03, 0xb1, 0x7e, 0x7c, 0x8a, 0x11,
	0x06, 0xf8, 0x25, 0x39, 0x8d, 0xde, 0xb9, 0x27, 0xde, 0x0d, 0x99, 0x33, 0x60, 0xae, 0xe5, 0x9f,
	0xf4, 0x2d, 0xfb, 0x9c, 0x79, 0x8e, 0xe1, 0x72, 0x3b, 0x10, 0x21, 0x0b, 0x2e, 0xb8, 0xcd, 0x42,
	0xa3, 0x58, 0x62, 0xc4, 0x21, 0x0b, 0x8c, 0xf4, 0xe4, 0xf4, 0x43, 0x36, 0xa1, 0x07, 0xb0, 0xd4,
	0x4b, 0xe7, 0x30, 0xd9, 0x5b, 0xb2, 0x0d, 0x8b, 0x38, 0x13, 0x77, 0x34, 0xa5, 0xa5, 0xb4, 0x2b,
	0x5d, 0x32, 0x4a, 0xf4, 0x95, 0x53, 0x11, 0xb8, 0x87, 0x34, 0x03, 0xa8, 0x39, 0x2e, 0xa1, 0xdf,
	0x14, 0x80, 0x8c, 0xea, 0x0f, 0x2f, 0xc9, 0xde, 0x2c, 0xf9, 0xbf, 0x51, 0xa2, 0xff, 0xd3, 0x0f,
	0x85, 0x77, 0x48, 0x4f, 0xb8, 0x43, 0xb7, 0x65, 0x9f, 0x93, 0x62, 0x0f, 0x42, 0x60, 0xde, 0xb3,
	0x5c, 0xa6, 0xcd, 0xa5, 0x0c, 0x13, 0xbf, 0xc9, 0x06, 0x2c, 0xb8, 0xd6, 0x1b, 0x11, 0x68, 0x2a,
	0x26, 0x65, 0x40, 0x34, 0x58, 0xb4, 0xc5, 0x70, 0xc8, 0x06, 0x4c, 0x9b, 0xc7, 0xfc, 0x38, 0x24,
	0x2d, 0xa8, 0x46, 0xcc, 0xb2, 0xcf, 0x58, 0x80, 0xad, 0x16, 0x10, 0x2d, 0xa6, 0x48, 0x13, 0xc0,
	0x0e, 0x98, 0x15, 0xb1, 0x57, 0xdc, 0x65, 0x5a, 0xb9, 0xa5, 0xb4, 0x55, 0xb3, 0x90, 0x21, 0x9b,
	0x50, 0xf6, 0x62, 0xb7, 0xcf, 0x02, 0x6d, 0x11, 0xc9, 0x59, 0x44, 0x1f, 0xc3, 0xca, 0xeb, 0x90,
	0x05, 0x85, 0x4b, 0x6e, 0x65, 0x97, 0x64, 0xa1, 0xa6, 0xb4, 0xd4, 0x76, 0x75, 0xb7, 0xde, 0xb1,
	0x7c, 0xde, 0x99, 0x54, 0x98, 0x63, 0x9c, 0xfe, 0x52, 0x60, 0xa5, 0x87, 0x67, 0xe4, 0xfa, 0xb6,
	0xb3, 0xdb, 0x4a, 0x7d, 0x36, 0x46, 0x89, 0xbe, 0x5a, 0x10, 0x37, 0x85, 0x68, 0xa6, 0xc1, 0xbd,
	0xb1, 0x06, 0x28, 0x4c, 0x77, 0x75, 0x94, 0xe8, 0xcb, 0xb2, 0x14, 0xd3, 0x74, 0xac, 0xca, 0xf6,
	0x44, 0x15, 0xf5, 0xda, 0x8b, 0x49, 0x80, 0x4e, 0x94, 0x3a, 0x98, 0x56, 0x0a, 0x75, 0xec, 0x6e,
	0x8e, 0x12, 0x9d, 0x48, 0x46, 0x01, 0xa4, 0xd3, 0x0a, 0xee, 0x42, 0x25, 0x0b, 0xb9, 0x23, 0x15,
	0x2e, 0x8e, 0x9f, 0x43, 0xd4, 0x9c, 0x94, 0xd1, 0x2f, 0x0a, 0x2c, 0xbf, 0x10, 0xdc, 0xcb, 0xaf,
	0x7f, 0x1f, 0xca, 0xa9, 0xf1, 0x72, 0x83, 0x68, 0x3f, 0x13, 0x5d, 0x8d, 0xb9, 0x33, 0x4a, 0xf4,
	0x9a, 0x6c, 0x24, 0x61, 0x6a, 0x66, 0x75, 0x45, 0x43, 0xce, 0xfd, 0xd5, 0x90, 0xc4, 0x80, 0xa5,
	0x94, 0x87, 0x77, 0x93, 0x6a, 0xac, 0x8f, 0x12, 0xbd, 0x3e, 0x69, 0x2d, 0x2f, 0x96, 0x17, 0x91,
	0x2d, 0x28, 0x87, 0x91, 0x15, 0xc5, 0x61, 0x26, 0xc5, 0xda, 0x64, 0x12, 0x99, 0xa7, 0x66, 0x56,
	0x40, 0x3f, 0x28, 0x50, 0x3b, 0xf2, 0x2e, 0x78, 0x64, 0x45, 0x5c, 0x78, 0x77, 0x5e, 0x16, 0xf2,
	0x04, 0x6a, 0x1c, 0xe9, 0x5c, 0x78, 0xb6, 0x70, 0x32, 0xc7, 0xcb, 0x1d, 0x91, 0x1c, 0x9e, 0x77,
	0x4f, 0x71, 0x6a, 0x4e, 0xd7, 0xa7, 0xb3, 0x66, 0xe2, 0xa9, 0xb3, 0xb3, 0xce, 0xa8, 0x46, 0x3f,
	0x2a, 0xf0, 0xef, 0xcb, 0x98, 0x05, 0x97, 0xa8, 0x7c, 0xea, 0xe0, 0x23, 0xef, 0x54, 0x48, 0x03,
	0x6b, 0x33, 0x53, 0x4f, 0x26, 0x7c, 0x06, 0x4b, 0x61, 0x14, 0x3b, 0xcc, 0x8b, 0x42, 0x6d, 0x0e,
	0xbd, 0xdd, 0x46, 0x6f, 0xff, 0xa1, 0x53, 0xe7, 0x58, 0x16, 0x63, 0x22, 0x67, 0x36, 0x9e, 0x42,
	0xb5, 0x00, 0xa4, 0x9b, 0x55, 0x7c, 0xf2, 0xfc, 0x61, 0x1b, 0x85, 0xa7, 0x92, 0xbb, 0x9f, 0xc7,
	0xbb, 0x9f, 0x54, 0x58, 0xc0, 0xf3, 0xc8, 0x3e, 0x54, 0x0b, 0x1b, 0x44, 0xd6, 0xe5, 0xae, 0x4d,
	0xed, 0x54, 0x63, 0x76, 0x01, 0x69, 0x89, 0xec, 0x40, 0x05, 0x63, 0x9c, 0xa0, 0x56, 0xc4, 0x6f,
	0x2c, 0xdf, 0x87, 0x4a, 0x6e, 0x53, 0xb2, 0x86, 0x78, 0xd1, 0xb6, 0x0d, 0x79, 0xec, 0xf4, 0x0f,
	0x01, 0x2d, 0x91, 0x87, 0x50, 0xcb, 0x73, 0x78, 0xd2, 0x72, 0x5e, 0x77, 0x0b, 0xab, 0x07, 0xe4,
	0xba, 0xa0, 0xb3, 0x43, 0xfe, 0x7f, 0x9b, 0xf0, 0xb4, 0x44, 0xf6, 0xa0, 0x2e, 0x55, 0x38, 0x1a,
	0x5b, 0x84, 0x10, 0xa4, 0x4c, 0x39, 0xb4, 0x01, 0x98, 0x7b, 0xee, 0xfa, 0x51, 0x4a, 0x7a, 0x00,
	0xb5, 0xe3, 0x48, 0xf8, 0x77, 0xa1, 0x3c, 0x1a, 0x7b, 0x9e, 0x0b, 0x0f, 0xe7, 0xbc, 0x89, 0x72,
	0x5d, 0xd1, 0xee, 0xea, 0xe7, 0xab, 0xa6, 0xf2, 0xf5, 0xaa, 0xa9, 0x7c, 0xbf, 0x6a, 0x2a, 0xef,
	0x7f, 0x34, 0x4b, 0xfd, 0x32, 0xfe, 0xd9, 0xec, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x56, 0xc4,
	0x2c, 0x47, 0xf8, 0x06, 0x00, 0x00,
}
