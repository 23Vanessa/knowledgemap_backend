// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/class.proto

package api

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	api "knowledgemap_backend/microservices/knowledgemap/user/api"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Class service

type ClassService interface {
	CreateClass(ctx context.Context, in *CreateClassReq, opts ...client.CallOption) (*ClassReply, error)
	ClassInfo(ctx context.Context, in *ClassReq, opts ...client.CallOption) (*ClassReply, error)
	JoinClass(ctx context.Context, in *JoinClassReq, opts ...client.CallOption) (*UserClassReply, error)
	UserClassInfo(ctx context.Context, in *api.UserReq, opts ...client.CallOption) (*UserClassReply, error)
	QueryClassUserInfo(ctx context.Context, in *ClassReq, opts ...client.CallOption) (*QueryClassUserInfoReply, error)
	SearchClassesInfo(ctx context.Context, in *SearchClassesInfoReq, opts ...client.CallOption) (*SearchClassesInfoReply, error)
	QueryFormList(ctx context.Context, in *api.Empty, opts ...client.CallOption) (*QueryFormListReply, error)
	CreateInvitaion(ctx context.Context, in *InvitationReq, opts ...client.CallOption) (*api.Empty, error)
	StopInvitaion(ctx context.Context, in *InvitationReq, opts ...client.CallOption) (*api.Empty, error)
	InvitaionInfo(ctx context.Context, in *InvitationReq, opts ...client.CallOption) (*ClassReply, error)
	DeleteStudent(ctx context.Context, in *DeleteStudentReq, opts ...client.CallOption) (*api.Empty, error)
	QueryStudentInClass(ctx context.Context, in *QueryStudentInClassReq, opts ...client.CallOption) (*QueryClassUserInfoReply, error)
	DeleteClass(ctx context.Context, in *DeleteClassReq, opts ...client.CallOption) (*api.Empty, error)
}

type classService struct {
	c    client.Client
	name string
}

func NewClassService(name string, c client.Client) ClassService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "api"
	}
	return &classService{
		c:    c,
		name: name,
	}
}

func (c *classService) CreateClass(ctx context.Context, in *CreateClassReq, opts ...client.CallOption) (*ClassReply, error) {
	req := c.c.NewRequest(c.name, "Class.CreateClass", in)
	out := new(ClassReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classService) ClassInfo(ctx context.Context, in *ClassReq, opts ...client.CallOption) (*ClassReply, error) {
	req := c.c.NewRequest(c.name, "Class.ClassInfo", in)
	out := new(ClassReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classService) JoinClass(ctx context.Context, in *JoinClassReq, opts ...client.CallOption) (*UserClassReply, error) {
	req := c.c.NewRequest(c.name, "Class.JoinClass", in)
	out := new(UserClassReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classService) UserClassInfo(ctx context.Context, in *api.UserReq, opts ...client.CallOption) (*UserClassReply, error) {
	req := c.c.NewRequest(c.name, "Class.UserClassInfo", in)
	out := new(UserClassReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classService) QueryClassUserInfo(ctx context.Context, in *ClassReq, opts ...client.CallOption) (*QueryClassUserInfoReply, error) {
	req := c.c.NewRequest(c.name, "Class.QueryClassUserInfo", in)
	out := new(QueryClassUserInfoReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classService) SearchClassesInfo(ctx context.Context, in *SearchClassesInfoReq, opts ...client.CallOption) (*SearchClassesInfoReply, error) {
	req := c.c.NewRequest(c.name, "Class.SearchClassesInfo", in)
	out := new(SearchClassesInfoReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classService) QueryFormList(ctx context.Context, in *api.Empty, opts ...client.CallOption) (*QueryFormListReply, error) {
	req := c.c.NewRequest(c.name, "Class.QueryFormList", in)
	out := new(QueryFormListReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classService) CreateInvitaion(ctx context.Context, in *InvitationReq, opts ...client.CallOption) (*api.Empty, error) {
	req := c.c.NewRequest(c.name, "Class.CreateInvitaion", in)
	out := new(api.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classService) StopInvitaion(ctx context.Context, in *InvitationReq, opts ...client.CallOption) (*api.Empty, error) {
	req := c.c.NewRequest(c.name, "Class.StopInvitaion", in)
	out := new(api.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classService) InvitaionInfo(ctx context.Context, in *InvitationReq, opts ...client.CallOption) (*ClassReply, error) {
	req := c.c.NewRequest(c.name, "Class.InvitaionInfo", in)
	out := new(ClassReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classService) DeleteStudent(ctx context.Context, in *DeleteStudentReq, opts ...client.CallOption) (*api.Empty, error) {
	req := c.c.NewRequest(c.name, "Class.DeleteStudent", in)
	out := new(api.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classService) QueryStudentInClass(ctx context.Context, in *QueryStudentInClassReq, opts ...client.CallOption) (*QueryClassUserInfoReply, error) {
	req := c.c.NewRequest(c.name, "Class.QueryStudentInClass", in)
	out := new(QueryClassUserInfoReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classService) DeleteClass(ctx context.Context, in *DeleteClassReq, opts ...client.CallOption) (*api.Empty, error) {
	req := c.c.NewRequest(c.name, "Class.DeleteClass", in)
	out := new(api.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Class service

type ClassHandler interface {
	CreateClass(context.Context, *CreateClassReq, *ClassReply) error
	ClassInfo(context.Context, *ClassReq, *ClassReply) error
	JoinClass(context.Context, *JoinClassReq, *UserClassReply) error
	UserClassInfo(context.Context, *api.UserReq, *UserClassReply) error
	QueryClassUserInfo(context.Context, *ClassReq, *QueryClassUserInfoReply) error
	SearchClassesInfo(context.Context, *SearchClassesInfoReq, *SearchClassesInfoReply) error
	QueryFormList(context.Context, *api.Empty, *QueryFormListReply) error
	CreateInvitaion(context.Context, *InvitationReq, *api.Empty) error
	StopInvitaion(context.Context, *InvitationReq, *api.Empty) error
	InvitaionInfo(context.Context, *InvitationReq, *ClassReply) error
	DeleteStudent(context.Context, *DeleteStudentReq, *api.Empty) error
	QueryStudentInClass(context.Context, *QueryStudentInClassReq, *QueryClassUserInfoReply) error
	DeleteClass(context.Context, *DeleteClassReq, *api.Empty) error
}

func RegisterClassHandler(s server.Server, hdlr ClassHandler, opts ...server.HandlerOption) error {
	type class interface {
		CreateClass(ctx context.Context, in *CreateClassReq, out *ClassReply) error
		ClassInfo(ctx context.Context, in *ClassReq, out *ClassReply) error
		JoinClass(ctx context.Context, in *JoinClassReq, out *UserClassReply) error
		UserClassInfo(ctx context.Context, in *api.UserReq, out *UserClassReply) error
		QueryClassUserInfo(ctx context.Context, in *ClassReq, out *QueryClassUserInfoReply) error
		SearchClassesInfo(ctx context.Context, in *SearchClassesInfoReq, out *SearchClassesInfoReply) error
		QueryFormList(ctx context.Context, in *api.Empty, out *QueryFormListReply) error
		CreateInvitaion(ctx context.Context, in *InvitationReq, out *api.Empty) error
		StopInvitaion(ctx context.Context, in *InvitationReq, out *api.Empty) error
		InvitaionInfo(ctx context.Context, in *InvitationReq, out *ClassReply) error
		DeleteStudent(ctx context.Context, in *DeleteStudentReq, out *api.Empty) error
		QueryStudentInClass(ctx context.Context, in *QueryStudentInClassReq, out *QueryClassUserInfoReply) error
		DeleteClass(ctx context.Context, in *DeleteClassReq, out *api.Empty) error
	}
	type Class struct {
		class
	}
	h := &classHandler{hdlr}
	return s.Handle(s.NewHandler(&Class{h}, opts...))
}

type classHandler struct {
	ClassHandler
}

func (h *classHandler) CreateClass(ctx context.Context, in *CreateClassReq, out *ClassReply) error {
	return h.ClassHandler.CreateClass(ctx, in, out)
}

func (h *classHandler) ClassInfo(ctx context.Context, in *ClassReq, out *ClassReply) error {
	return h.ClassHandler.ClassInfo(ctx, in, out)
}

func (h *classHandler) JoinClass(ctx context.Context, in *JoinClassReq, out *UserClassReply) error {
	return h.ClassHandler.JoinClass(ctx, in, out)
}

func (h *classHandler) UserClassInfo(ctx context.Context, in *api.UserReq, out *UserClassReply) error {
	return h.ClassHandler.UserClassInfo(ctx, in, out)
}

func (h *classHandler) QueryClassUserInfo(ctx context.Context, in *ClassReq, out *QueryClassUserInfoReply) error {
	return h.ClassHandler.QueryClassUserInfo(ctx, in, out)
}

func (h *classHandler) SearchClassesInfo(ctx context.Context, in *SearchClassesInfoReq, out *SearchClassesInfoReply) error {
	return h.ClassHandler.SearchClassesInfo(ctx, in, out)
}

func (h *classHandler) QueryFormList(ctx context.Context, in *api.Empty, out *QueryFormListReply) error {
	return h.ClassHandler.QueryFormList(ctx, in, out)
}

func (h *classHandler) CreateInvitaion(ctx context.Context, in *InvitationReq, out *api.Empty) error {
	return h.ClassHandler.CreateInvitaion(ctx, in, out)
}

func (h *classHandler) StopInvitaion(ctx context.Context, in *InvitationReq, out *api.Empty) error {
	return h.ClassHandler.StopInvitaion(ctx, in, out)
}

func (h *classHandler) InvitaionInfo(ctx context.Context, in *InvitationReq, out *ClassReply) error {
	return h.ClassHandler.InvitaionInfo(ctx, in, out)
}

func (h *classHandler) DeleteStudent(ctx context.Context, in *DeleteStudentReq, out *api.Empty) error {
	return h.ClassHandler.DeleteStudent(ctx, in, out)
}

func (h *classHandler) QueryStudentInClass(ctx context.Context, in *QueryStudentInClassReq, out *QueryClassUserInfoReply) error {
	return h.ClassHandler.QueryStudentInClass(ctx, in, out)
}

func (h *classHandler) DeleteClass(ctx context.Context, in *DeleteClassReq, out *api.Empty) error {
	return h.ClassHandler.DeleteClass(ctx, in, out)
}
