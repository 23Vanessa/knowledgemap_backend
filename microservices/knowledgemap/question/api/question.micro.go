// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/question.proto

package api

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "knowledgemap_backend/microservices/knowledgemap/class/api"
	api "knowledgemap_backend/microservices/knowledgemap/user/api"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Question service

type QuestionService interface {
	GetMyQuestionInfo(ctx context.Context, in *CRqQueryMyQuestionInfoBySubject, opts ...client.CallOption) (*CRpMyQuestionInfoBySubject, error)
	CreateQuestion(ctx context.Context, in *CreateQuestionReq, opts ...client.CallOption) (*QuestionInfoReply, error)
	QueryQuestionKind(ctx context.Context, in *api.Empty, opts ...client.CallOption) (*QuestionKindInfoReply, error)
	QueryQuestion(ctx context.Context, in *QueryQuestionReq, opts ...client.CallOption) (*QueryQuestionReply, error)
	DoQuestion(ctx context.Context, in *DoQuestionInfo, opts ...client.CallOption) (*QuestionItems, error)
	CreatePracticeSummary(ctx context.Context, in *CreatePracticeSummaryReq, opts ...client.CallOption) (*CreatePracticeSummaryReply, error)
	QueryPracticeSummaryInfo(ctx context.Context, in *QueryPracticeSummaryReq, opts ...client.CallOption) (*PracticeSummaryInfo, error)
	GetPracticeSummary(ctx context.Context, in *QueryPracticeSummaryReq, opts ...client.CallOption) (*PracticeSummaryDetailInfo, error)
	QueryMyPracticeSummary(ctx context.Context, in *QueryMyPracticeSummaryReq, opts ...client.CallOption) (*QueryMyPracticeSummaryReply, error)
	AddQuestionInPS(ctx context.Context, in *ControllQuestionInPSReq, opts ...client.CallOption) (*api.Empty, error)
	DelteQuestionInPS(ctx context.Context, in *ControllQuestionInPSReq, opts ...client.CallOption) (*api.Empty, error)
	CreatePaper(ctx context.Context, in *CreatePaperReq, opts ...client.CallOption) (*CreatePaperReply, error)
	ChangeQuestionInPaper(ctx context.Context, in *ChangeQuestionInPaperReq, opts ...client.CallOption) (*api.Empty, error)
	QueryPaperInClass(ctx context.Context, in *QueryPaperInClassReq, opts ...client.CallOption) (*QueryPaperInClassReply, error)
	QueryRecommendPaper(ctx context.Context, in *QueryRecommendPaperReq, opts ...client.CallOption) (*QueryRecommendPaperReply, error)
	QueryPaperQuestions(ctx context.Context, in *QueryPaperQuestionsReq, opts ...client.CallOption) (*QueryPaperQuestionsReply, error)
	DoPaper(ctx context.Context, in *DoPaperReq, opts ...client.CallOption) (*api.Empty, error)
	QueryMyPaperAnswerRecord(ctx context.Context, in *QueryPaperAnswerRecordReq, opts ...client.CallOption) (*QueryPaperAnswerRecordReply, error)
	QueryMyPaperAnswerRecordList(ctx context.Context, in *QueryPaperAnswerRecordListReq, opts ...client.CallOption) (*QueryPaperAnswerRecordListReply, error)
}

type questionService struct {
	c    client.Client
	name string
}

func NewQuestionService(name string, c client.Client) QuestionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "api"
	}
	return &questionService{
		c:    c,
		name: name,
	}
}

func (c *questionService) GetMyQuestionInfo(ctx context.Context, in *CRqQueryMyQuestionInfoBySubject, opts ...client.CallOption) (*CRpMyQuestionInfoBySubject, error) {
	req := c.c.NewRequest(c.name, "Question.GetMyQuestionInfo", in)
	out := new(CRpMyQuestionInfoBySubject)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) CreateQuestion(ctx context.Context, in *CreateQuestionReq, opts ...client.CallOption) (*QuestionInfoReply, error) {
	req := c.c.NewRequest(c.name, "Question.CreateQuestion", in)
	out := new(QuestionInfoReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) QueryQuestionKind(ctx context.Context, in *api.Empty, opts ...client.CallOption) (*QuestionKindInfoReply, error) {
	req := c.c.NewRequest(c.name, "Question.QueryQuestionKind", in)
	out := new(QuestionKindInfoReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) QueryQuestion(ctx context.Context, in *QueryQuestionReq, opts ...client.CallOption) (*QueryQuestionReply, error) {
	req := c.c.NewRequest(c.name, "Question.QueryQuestion", in)
	out := new(QueryQuestionReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) DoQuestion(ctx context.Context, in *DoQuestionInfo, opts ...client.CallOption) (*QuestionItems, error) {
	req := c.c.NewRequest(c.name, "Question.DoQuestion", in)
	out := new(QuestionItems)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) CreatePracticeSummary(ctx context.Context, in *CreatePracticeSummaryReq, opts ...client.CallOption) (*CreatePracticeSummaryReply, error) {
	req := c.c.NewRequest(c.name, "Question.CreatePracticeSummary", in)
	out := new(CreatePracticeSummaryReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) QueryPracticeSummaryInfo(ctx context.Context, in *QueryPracticeSummaryReq, opts ...client.CallOption) (*PracticeSummaryInfo, error) {
	req := c.c.NewRequest(c.name, "Question.QueryPracticeSummaryInfo", in)
	out := new(PracticeSummaryInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) GetPracticeSummary(ctx context.Context, in *QueryPracticeSummaryReq, opts ...client.CallOption) (*PracticeSummaryDetailInfo, error) {
	req := c.c.NewRequest(c.name, "Question.GetPracticeSummary", in)
	out := new(PracticeSummaryDetailInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) QueryMyPracticeSummary(ctx context.Context, in *QueryMyPracticeSummaryReq, opts ...client.CallOption) (*QueryMyPracticeSummaryReply, error) {
	req := c.c.NewRequest(c.name, "Question.QueryMyPracticeSummary", in)
	out := new(QueryMyPracticeSummaryReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) AddQuestionInPS(ctx context.Context, in *ControllQuestionInPSReq, opts ...client.CallOption) (*api.Empty, error) {
	req := c.c.NewRequest(c.name, "Question.AddQuestionInPS", in)
	out := new(api.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) DelteQuestionInPS(ctx context.Context, in *ControllQuestionInPSReq, opts ...client.CallOption) (*api.Empty, error) {
	req := c.c.NewRequest(c.name, "Question.DelteQuestionInPS", in)
	out := new(api.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) CreatePaper(ctx context.Context, in *CreatePaperReq, opts ...client.CallOption) (*CreatePaperReply, error) {
	req := c.c.NewRequest(c.name, "Question.CreatePaper", in)
	out := new(CreatePaperReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) ChangeQuestionInPaper(ctx context.Context, in *ChangeQuestionInPaperReq, opts ...client.CallOption) (*api.Empty, error) {
	req := c.c.NewRequest(c.name, "Question.ChangeQuestionInPaper", in)
	out := new(api.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) QueryPaperInClass(ctx context.Context, in *QueryPaperInClassReq, opts ...client.CallOption) (*QueryPaperInClassReply, error) {
	req := c.c.NewRequest(c.name, "Question.QueryPaperInClass", in)
	out := new(QueryPaperInClassReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) QueryRecommendPaper(ctx context.Context, in *QueryRecommendPaperReq, opts ...client.CallOption) (*QueryRecommendPaperReply, error) {
	req := c.c.NewRequest(c.name, "Question.QueryRecommendPaper", in)
	out := new(QueryRecommendPaperReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) QueryPaperQuestions(ctx context.Context, in *QueryPaperQuestionsReq, opts ...client.CallOption) (*QueryPaperQuestionsReply, error) {
	req := c.c.NewRequest(c.name, "Question.QueryPaperQuestions", in)
	out := new(QueryPaperQuestionsReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) DoPaper(ctx context.Context, in *DoPaperReq, opts ...client.CallOption) (*api.Empty, error) {
	req := c.c.NewRequest(c.name, "Question.DoPaper", in)
	out := new(api.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) QueryMyPaperAnswerRecord(ctx context.Context, in *QueryPaperAnswerRecordReq, opts ...client.CallOption) (*QueryPaperAnswerRecordReply, error) {
	req := c.c.NewRequest(c.name, "Question.QueryMyPaperAnswerRecord", in)
	out := new(QueryPaperAnswerRecordReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) QueryMyPaperAnswerRecordList(ctx context.Context, in *QueryPaperAnswerRecordListReq, opts ...client.CallOption) (*QueryPaperAnswerRecordListReply, error) {
	req := c.c.NewRequest(c.name, "Question.QueryMyPaperAnswerRecordList", in)
	out := new(QueryPaperAnswerRecordListReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Question service

type QuestionHandler interface {
	GetMyQuestionInfo(context.Context, *CRqQueryMyQuestionInfoBySubject, *CRpMyQuestionInfoBySubject) error
	CreateQuestion(context.Context, *CreateQuestionReq, *QuestionInfoReply) error
	QueryQuestionKind(context.Context, *api.Empty, *QuestionKindInfoReply) error
	QueryQuestion(context.Context, *QueryQuestionReq, *QueryQuestionReply) error
	DoQuestion(context.Context, *DoQuestionInfo, *QuestionItems) error
	CreatePracticeSummary(context.Context, *CreatePracticeSummaryReq, *CreatePracticeSummaryReply) error
	QueryPracticeSummaryInfo(context.Context, *QueryPracticeSummaryReq, *PracticeSummaryInfo) error
	GetPracticeSummary(context.Context, *QueryPracticeSummaryReq, *PracticeSummaryDetailInfo) error
	QueryMyPracticeSummary(context.Context, *QueryMyPracticeSummaryReq, *QueryMyPracticeSummaryReply) error
	AddQuestionInPS(context.Context, *ControllQuestionInPSReq, *api.Empty) error
	DelteQuestionInPS(context.Context, *ControllQuestionInPSReq, *api.Empty) error
	CreatePaper(context.Context, *CreatePaperReq, *CreatePaperReply) error
	ChangeQuestionInPaper(context.Context, *ChangeQuestionInPaperReq, *api.Empty) error
	QueryPaperInClass(context.Context, *QueryPaperInClassReq, *QueryPaperInClassReply) error
	QueryRecommendPaper(context.Context, *QueryRecommendPaperReq, *QueryRecommendPaperReply) error
	QueryPaperQuestions(context.Context, *QueryPaperQuestionsReq, *QueryPaperQuestionsReply) error
	DoPaper(context.Context, *DoPaperReq, *api.Empty) error
	QueryMyPaperAnswerRecord(context.Context, *QueryPaperAnswerRecordReq, *QueryPaperAnswerRecordReply) error
	QueryMyPaperAnswerRecordList(context.Context, *QueryPaperAnswerRecordListReq, *QueryPaperAnswerRecordListReply) error
}

func RegisterQuestionHandler(s server.Server, hdlr QuestionHandler, opts ...server.HandlerOption) error {
	type question interface {
		GetMyQuestionInfo(ctx context.Context, in *CRqQueryMyQuestionInfoBySubject, out *CRpMyQuestionInfoBySubject) error
		CreateQuestion(ctx context.Context, in *CreateQuestionReq, out *QuestionInfoReply) error
		QueryQuestionKind(ctx context.Context, in *api.Empty, out *QuestionKindInfoReply) error
		QueryQuestion(ctx context.Context, in *QueryQuestionReq, out *QueryQuestionReply) error
		DoQuestion(ctx context.Context, in *DoQuestionInfo, out *QuestionItems) error
		CreatePracticeSummary(ctx context.Context, in *CreatePracticeSummaryReq, out *CreatePracticeSummaryReply) error
		QueryPracticeSummaryInfo(ctx context.Context, in *QueryPracticeSummaryReq, out *PracticeSummaryInfo) error
		GetPracticeSummary(ctx context.Context, in *QueryPracticeSummaryReq, out *PracticeSummaryDetailInfo) error
		QueryMyPracticeSummary(ctx context.Context, in *QueryMyPracticeSummaryReq, out *QueryMyPracticeSummaryReply) error
		AddQuestionInPS(ctx context.Context, in *ControllQuestionInPSReq, out *api.Empty) error
		DelteQuestionInPS(ctx context.Context, in *ControllQuestionInPSReq, out *api.Empty) error
		CreatePaper(ctx context.Context, in *CreatePaperReq, out *CreatePaperReply) error
		ChangeQuestionInPaper(ctx context.Context, in *ChangeQuestionInPaperReq, out *api.Empty) error
		QueryPaperInClass(ctx context.Context, in *QueryPaperInClassReq, out *QueryPaperInClassReply) error
		QueryRecommendPaper(ctx context.Context, in *QueryRecommendPaperReq, out *QueryRecommendPaperReply) error
		QueryPaperQuestions(ctx context.Context, in *QueryPaperQuestionsReq, out *QueryPaperQuestionsReply) error
		DoPaper(ctx context.Context, in *DoPaperReq, out *api.Empty) error
		QueryMyPaperAnswerRecord(ctx context.Context, in *QueryPaperAnswerRecordReq, out *QueryPaperAnswerRecordReply) error
		QueryMyPaperAnswerRecordList(ctx context.Context, in *QueryPaperAnswerRecordListReq, out *QueryPaperAnswerRecordListReply) error
	}
	type Question struct {
		question
	}
	h := &questionHandler{hdlr}
	return s.Handle(s.NewHandler(&Question{h}, opts...))
}

type questionHandler struct {
	QuestionHandler
}

func (h *questionHandler) GetMyQuestionInfo(ctx context.Context, in *CRqQueryMyQuestionInfoBySubject, out *CRpMyQuestionInfoBySubject) error {
	return h.QuestionHandler.GetMyQuestionInfo(ctx, in, out)
}

func (h *questionHandler) CreateQuestion(ctx context.Context, in *CreateQuestionReq, out *QuestionInfoReply) error {
	return h.QuestionHandler.CreateQuestion(ctx, in, out)
}

func (h *questionHandler) QueryQuestionKind(ctx context.Context, in *api.Empty, out *QuestionKindInfoReply) error {
	return h.QuestionHandler.QueryQuestionKind(ctx, in, out)
}

func (h *questionHandler) QueryQuestion(ctx context.Context, in *QueryQuestionReq, out *QueryQuestionReply) error {
	return h.QuestionHandler.QueryQuestion(ctx, in, out)
}

func (h *questionHandler) DoQuestion(ctx context.Context, in *DoQuestionInfo, out *QuestionItems) error {
	return h.QuestionHandler.DoQuestion(ctx, in, out)
}

func (h *questionHandler) CreatePracticeSummary(ctx context.Context, in *CreatePracticeSummaryReq, out *CreatePracticeSummaryReply) error {
	return h.QuestionHandler.CreatePracticeSummary(ctx, in, out)
}

func (h *questionHandler) QueryPracticeSummaryInfo(ctx context.Context, in *QueryPracticeSummaryReq, out *PracticeSummaryInfo) error {
	return h.QuestionHandler.QueryPracticeSummaryInfo(ctx, in, out)
}

func (h *questionHandler) GetPracticeSummary(ctx context.Context, in *QueryPracticeSummaryReq, out *PracticeSummaryDetailInfo) error {
	return h.QuestionHandler.GetPracticeSummary(ctx, in, out)
}

func (h *questionHandler) QueryMyPracticeSummary(ctx context.Context, in *QueryMyPracticeSummaryReq, out *QueryMyPracticeSummaryReply) error {
	return h.QuestionHandler.QueryMyPracticeSummary(ctx, in, out)
}

func (h *questionHandler) AddQuestionInPS(ctx context.Context, in *ControllQuestionInPSReq, out *api.Empty) error {
	return h.QuestionHandler.AddQuestionInPS(ctx, in, out)
}

func (h *questionHandler) DelteQuestionInPS(ctx context.Context, in *ControllQuestionInPSReq, out *api.Empty) error {
	return h.QuestionHandler.DelteQuestionInPS(ctx, in, out)
}

func (h *questionHandler) CreatePaper(ctx context.Context, in *CreatePaperReq, out *CreatePaperReply) error {
	return h.QuestionHandler.CreatePaper(ctx, in, out)
}

func (h *questionHandler) ChangeQuestionInPaper(ctx context.Context, in *ChangeQuestionInPaperReq, out *api.Empty) error {
	return h.QuestionHandler.ChangeQuestionInPaper(ctx, in, out)
}

func (h *questionHandler) QueryPaperInClass(ctx context.Context, in *QueryPaperInClassReq, out *QueryPaperInClassReply) error {
	return h.QuestionHandler.QueryPaperInClass(ctx, in, out)
}

func (h *questionHandler) QueryRecommendPaper(ctx context.Context, in *QueryRecommendPaperReq, out *QueryRecommendPaperReply) error {
	return h.QuestionHandler.QueryRecommendPaper(ctx, in, out)
}

func (h *questionHandler) QueryPaperQuestions(ctx context.Context, in *QueryPaperQuestionsReq, out *QueryPaperQuestionsReply) error {
	return h.QuestionHandler.QueryPaperQuestions(ctx, in, out)
}

func (h *questionHandler) DoPaper(ctx context.Context, in *DoPaperReq, out *api.Empty) error {
	return h.QuestionHandler.DoPaper(ctx, in, out)
}

func (h *questionHandler) QueryMyPaperAnswerRecord(ctx context.Context, in *QueryPaperAnswerRecordReq, out *QueryPaperAnswerRecordReply) error {
	return h.QuestionHandler.QueryMyPaperAnswerRecord(ctx, in, out)
}

func (h *questionHandler) QueryMyPaperAnswerRecordList(ctx context.Context, in *QueryPaperAnswerRecordListReq, out *QueryPaperAnswerRecordListReply) error {
	return h.QuestionHandler.QueryMyPaperAnswerRecordList(ctx, in, out)
}
