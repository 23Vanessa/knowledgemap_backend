// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/knowledgemap.proto

package api

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for KnowledegeMap service

type KnowledegeMapService interface {
	GetKnowledegeMapBySbject(ctx context.Context, in *Empty, opts ...client.CallOption) (*KnowledegeMapInfo, error)
}

type knowledegeMapService struct {
	c    client.Client
	name string
}

func NewKnowledegeMapService(name string, c client.Client) KnowledegeMapService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "api"
	}
	return &knowledegeMapService{
		c:    c,
		name: name,
	}
}

func (c *knowledegeMapService) GetKnowledegeMapBySbject(ctx context.Context, in *Empty, opts ...client.CallOption) (*KnowledegeMapInfo, error) {
	req := c.c.NewRequest(c.name, "KnowledegeMap.GetKnowledegeMapBySbject", in)
	out := new(KnowledegeMapInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KnowledegeMap service

type KnowledegeMapHandler interface {
	GetKnowledegeMapBySbject(context.Context, *Empty, *KnowledegeMapInfo) error
}

func RegisterKnowledegeMapHandler(s server.Server, hdlr KnowledegeMapHandler, opts ...server.HandlerOption) error {
	type knowledegeMap interface {
		GetKnowledegeMapBySbject(ctx context.Context, in *Empty, out *KnowledegeMapInfo) error
	}
	type KnowledegeMap struct {
		knowledegeMap
	}
	h := &knowledegeMapHandler{hdlr}
	return s.Handle(s.NewHandler(&KnowledegeMap{h}, opts...))
}

type knowledegeMapHandler struct {
	KnowledegeMapHandler
}

func (h *knowledegeMapHandler) GetKnowledegeMapBySbject(ctx context.Context, in *Empty, out *KnowledegeMapInfo) error {
	return h.KnowledegeMapHandler.GetKnowledegeMapBySbject(ctx, in, out)
}
