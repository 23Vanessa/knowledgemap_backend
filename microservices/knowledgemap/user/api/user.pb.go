// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/user.proto

/*
	Package api is a generated protocol buffer package.

	It is generated from these files:
		api/user.proto

	It has these top-level messages:
		QueryUserInfoReq
		QueryUserInfoReply
		UserReq
		Empty
		UserInfoReply
		UserReply
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Identify int32

const (
	Identify_STUDENT   Identify = 0
	Identify_TEACHER   Identify = 1
	Identify_SECRETARY Identify = 2
	Identify_NOTFOUND  Identify = -1
)

var Identify_name = map[int32]string{
	0:  "STUDENT",
	1:  "TEACHER",
	2:  "SECRETARY",
	-1: "NOTFOUND",
}
var Identify_value = map[string]int32{
	"STUDENT":   0,
	"TEACHER":   1,
	"SECRETARY": 2,
	"NOTFOUND":  -1,
}

func (x Identify) String() string {
	return proto.EnumName(Identify_name, int32(x))
}
func (Identify) EnumDescriptor() ([]byte, []int) { return fileDescriptorUser, []int{0} }

type QueryUserInfoReq struct {
	Username string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username" form:"username"`
	Identify Identify `protobuf:"varint,2,opt,name=identify,proto3,enum=api.Identify" json:"identify" form:"identify"`
}

func (m *QueryUserInfoReq) Reset()                    { *m = QueryUserInfoReq{} }
func (m *QueryUserInfoReq) String() string            { return proto.CompactTextString(m) }
func (*QueryUserInfoReq) ProtoMessage()               {}
func (*QueryUserInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{0} }

func (m *QueryUserInfoReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *QueryUserInfoReq) GetIdentify() Identify {
	if m != nil {
		return m.Identify
	}
	return Identify_STUDENT
}

type QueryUserInfoReply struct {
	Users []*UserReply `protobuf:"bytes,1,rep,name=users" json:"users" form:"users"`
}

func (m *QueryUserInfoReply) Reset()                    { *m = QueryUserInfoReply{} }
func (m *QueryUserInfoReply) String() string            { return proto.CompactTextString(m) }
func (*QueryUserInfoReply) ProtoMessage()               {}
func (*QueryUserInfoReply) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{1} }

func (m *QueryUserInfoReply) GetUsers() []*UserReply {
	if m != nil {
		return m.Users
	}
	return nil
}

type UserReq struct {
	Userid   string   `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid" form:"userid"`
	Identify Identify `protobuf:"varint,2,opt,name=identify,proto3,enum=api.Identify" json:"identify" form:"identify"`
}

func (m *UserReq) Reset()                    { *m = UserReq{} }
func (m *UserReq) String() string            { return proto.CompactTextString(m) }
func (*UserReq) ProtoMessage()               {}
func (*UserReq) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{2} }

func (m *UserReq) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *UserReq) GetIdentify() Identify {
	if m != nil {
		return m.Identify
	}
	return Identify_STUDENT
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{3} }

type UserInfoReply struct {
	User *UserReply `protobuf:"bytes,1,opt,name=user" json:"user"`
}

func (m *UserInfoReply) Reset()                    { *m = UserInfoReply{} }
func (m *UserInfoReply) String() string            { return proto.CompactTextString(m) }
func (*UserInfoReply) ProtoMessage()               {}
func (*UserInfoReply) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{4} }

func (m *UserInfoReply) GetUser() *UserReply {
	if m != nil {
		return m.User
	}
	return nil
}

type UserReply struct {
	Userid   string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid" bson:"_id",form:"_id"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username" bson:"name"`
	Usertype int64  `protobuf:"varint,3,opt,name=usertype,proto3" json:"usertype"`
	Major    string `protobuf:"bytes,4,opt,name=major,proto3" json:"major"`
	Sex      string `protobuf:"bytes,5,opt,name=sex,proto3" json:"sex"`
	// repeated string  courses = 8;
	// string  class = 9;
	Account    string `protobuf:"bytes,6,opt,name=account,proto3" json:"account"`
	Password   string `protobuf:"bytes,7,opt,name=password,proto3" json:"password"`
	Number     string `protobuf:"bytes,8,opt,name=number,proto3" json:"number"`
	College    string `protobuf:"bytes,9,opt,name=college,proto3" json:"college"`
	Imagepath  string `protobuf:"bytes,10,opt,name=imagepath,proto3" json:"imagepath"`
	Createtime int64  `protobuf:"varint,11,opt,name=createtime,proto3" json:"createtime"`
}

func (m *UserReply) Reset()                    { *m = UserReply{} }
func (m *UserReply) String() string            { return proto.CompactTextString(m) }
func (*UserReply) ProtoMessage()               {}
func (*UserReply) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{5} }

func (m *UserReply) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *UserReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserReply) GetUsertype() int64 {
	if m != nil {
		return m.Usertype
	}
	return 0
}

func (m *UserReply) GetMajor() string {
	if m != nil {
		return m.Major
	}
	return ""
}

func (m *UserReply) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *UserReply) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *UserReply) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserReply) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *UserReply) GetCollege() string {
	if m != nil {
		return m.College
	}
	return ""
}

func (m *UserReply) GetImagepath() string {
	if m != nil {
		return m.Imagepath
	}
	return ""
}

func (m *UserReply) GetCreatetime() int64 {
	if m != nil {
		return m.Createtime
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryUserInfoReq)(nil), "api.QueryUserInfoReq")
	proto.RegisterType((*QueryUserInfoReply)(nil), "api.QueryUserInfoReply")
	proto.RegisterType((*UserReq)(nil), "api.UserReq")
	proto.RegisterType((*Empty)(nil), "api.Empty")
	proto.RegisterType((*UserInfoReply)(nil), "api.UserInfoReply")
	proto.RegisterType((*UserReply)(nil), "api.UserReply")
	proto.RegisterEnum("api.Identify", Identify_name, Identify_value)
}
func (m *QueryUserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Identify != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Identify))
	}
	return i, nil
}

func (m *QueryUserInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Identify != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Identify))
	}
	return i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UserInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.User.Size()))
		n1, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *UserReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Usertype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Usertype))
	}
	if len(m.Major) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Major)))
		i += copy(dAtA[i:], m.Major)
	}
	if len(m.Sex) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Sex)))
		i += copy(dAtA[i:], m.Sex)
	}
	if len(m.Account) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Number) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Number)))
		i += copy(dAtA[i:], m.Number)
	}
	if len(m.College) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.College)))
		i += copy(dAtA[i:], m.College)
	}
	if len(m.Imagepath) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Imagepath)))
		i += copy(dAtA[i:], m.Imagepath)
	}
	if m.Createtime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Createtime))
	}
	return i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *QueryUserInfoReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Identify != 0 {
		n += 1 + sovUser(uint64(m.Identify))
	}
	return n
}

func (m *QueryUserInfoReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *UserReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Identify != 0 {
		n += 1 + sovUser(uint64(m.Identify))
	}
	return n
}

func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UserInfoReply) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UserReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Usertype != 0 {
		n += 1 + sovUser(uint64(m.Usertype))
	}
	l = len(m.Major)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.College)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Imagepath)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Createtime != 0 {
		n += 1 + sovUser(uint64(m.Createtime))
	}
	return n
}

func sovUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryUserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identify", wireType)
			}
			m.Identify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Identify |= (Identify(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserReply{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identify", wireType)
			}
			m.Identify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Identify |= (Identify(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserReply{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usertype", wireType)
			}
			m.Usertype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usertype |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Major = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field College", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.College = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imagepath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imagepath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Createtime", wireType)
			}
			m.Createtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Createtime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUser(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/user.proto", fileDescriptorUser) }

var fileDescriptorUser = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xcb, 0x8e, 0x12, 0x41,
	0x14, 0xa5, 0x79, 0x36, 0x97, 0x81, 0x69, 0x4b, 0xd1, 0x92, 0x18, 0x20, 0xb5, 0xc2, 0x17, 0x44,
	0x26, 0x71, 0x31, 0x0b, 0x13, 0x98, 0x69, 0xe3, 0x18, 0xc3, 0xc4, 0x1e, 0x58, 0xb8, 0x9a, 0x34,
	0x50, 0x30, 0x65, 0xe8, 0xae, 0xa6, 0x1f, 0xd1, 0x5e, 0xfb, 0x13, 0x7e, 0x92, 0x4b, 0x37, 0x6e,
	0x89, 0xc1, 0x3f, 0xe0, 0x07, 0x34, 0x55, 0x4d, 0x37, 0x0c, 0xba, 0xb3, 0x57, 0x75, 0xce, 0x3d,
	0xf7, 0xd4, 0xbd, 0x39, 0x5d, 0x50, 0x31, 0x1d, 0xd6, 0x09, 0x3c, 0xea, 0xb6, 0x1d, 0x97, 0xfb,
	0x1c, 0x65, 0x4c, 0x87, 0xd5, 0x9e, 0xcf, 0x99, 0x7f, 0x13, 0x8c, 0xdb, 0x13, 0x6e, 0x75, 0xe6,
	0x7c, 0xce, 0x3b, 0xb2, 0x36, 0x0e, 0x66, 0x12, 0x49, 0x20, 0x4f, 0x51, 0x0f, 0xf9, 0xa2, 0x80,
	0xf6, 0x3e, 0xa0, 0x6e, 0x38, 0xf2, 0xa8, 0x7b, 0x61, 0xcf, 0xb8, 0x41, 0x97, 0xa8, 0x03, 0xaa,
	0xb0, 0xb5, 0x4d, 0x8b, 0x62, 0xa5, 0xa9, 0xb4, 0x8a, 0xfd, 0xbb, 0x9b, 0x55, 0xe3, 0x78, 0xc6,
	0x5d, 0xeb, 0x94, 0xc4, 0x15, 0x62, 0x24, 0x22, 0xf4, 0x0a, 0x54, 0x36, 0xa5, 0xb6, 0xcf, 0x66,
	0x21, 0x4e, 0x37, 0x95, 0x56, 0xa5, 0x5b, 0x6e, 0x9b, 0x0e, 0x6b, 0x5f, 0x6c, 0xc9, 0xfd, 0xfe,
	0x58, 0x48, 0x8c, 0xa4, 0x87, 0xbc, 0x03, 0x74, 0x30, 0x84, 0xb3, 0x08, 0xd1, 0x4b, 0xc8, 0x89,
	0x1b, 0x3c, 0xac, 0x34, 0x33, 0xad, 0x52, 0xb7, 0x22, 0x2d, 0x85, 0x44, 0x96, 0xfb, 0xda, 0x66,
	0xd5, 0x38, 0xda, 0xcd, 0xe4, 0x11, 0x23, 0x92, 0x13, 0x1f, 0x0a, 0x91, 0x6a, 0x89, 0x1e, 0x43,
	0x5e, 0x70, 0x6c, 0xba, 0xdd, 0xe3, 0xce, 0x66, 0xd5, 0x28, 0xef, 0x7a, 0xd8, 0x94, 0x18, 0x5b,
	0xc1, 0x7f, 0xef, 0x50, 0x80, 0x9c, 0x6e, 0x39, 0x7e, 0x48, 0x4e, 0xa0, 0x7c, 0x7b, 0x0f, 0x02,
	0x59, 0x71, 0x87, 0x1c, 0xe1, 0xaf, 0x35, 0x0c, 0x59, 0x23, 0x3f, 0xd2, 0x50, 0x4c, 0x38, 0xf4,
	0xe2, 0x60, 0xec, 0x87, 0x9b, 0x55, 0xa3, 0x3a, 0xf6, 0xb8, 0x7d, 0x4a, 0xae, 0xd9, 0x94, 0x3c,
	0x8b, 0xa6, 0xb8, 0xde, 0x1f, 0xff, 0xe9, 0x5e, 0x66, 0x69, 0xd9, 0x74, 0xbc, 0x59, 0x35, 0x4a,
	0x51, 0xd3, 0x61, 0x5e, 0xb5, 0x48, 0xec, 0x87, 0x0e, 0xc5, 0x99, 0xa6, 0xd2, 0xca, 0x18, 0x09,
	0x46, 0xf7, 0x20, 0x67, 0x99, 0x1f, 0xb9, 0x8b, 0xb3, 0xc2, 0xc5, 0x88, 0x00, 0xd2, 0x20, 0xe3,
	0xd1, 0xcf, 0x38, 0x27, 0x39, 0x71, 0x44, 0x18, 0x0a, 0xe6, 0x64, 0xc2, 0x03, 0xdb, 0xc7, 0x79,
	0xc9, 0xc6, 0x50, 0xb8, 0x3b, 0xa6, 0xe7, 0x7d, 0xe2, 0xee, 0x14, 0x17, 0x64, 0x29, 0xc1, 0xe8,
	0x3e, 0xe4, 0xed, 0xc0, 0x1a, 0x53, 0x17, 0xab, 0xb2, 0xb2, 0x45, 0xc2, 0x6d, 0xc2, 0x17, 0x0b,
	0x3a, 0xa7, 0xb8, 0x18, 0xb9, 0x6d, 0x21, 0x7a, 0x04, 0x45, 0x66, 0x99, 0x73, 0xea, 0x98, 0xfe,
	0x0d, 0x06, 0x59, 0xdb, 0x11, 0xa8, 0x0e, 0x30, 0x71, 0xa9, 0xe9, 0x53, 0x9f, 0x59, 0x14, 0x97,
	0xe4, 0x2e, 0x7b, 0xcc, 0x93, 0xb7, 0xa0, 0xc6, 0x01, 0xa2, 0x12, 0x14, 0xae, 0x86, 0xa3, 0x73,
	0x7d, 0x30, 0xd4, 0x52, 0x02, 0x0c, 0xf5, 0xde, 0xd9, 0x1b, 0xdd, 0xd0, 0x14, 0x54, 0x86, 0xe2,
	0x95, 0x7e, 0x66, 0xe8, 0xc3, 0x9e, 0xf1, 0x41, 0x4b, 0xa3, 0x2a, 0xa8, 0x83, 0xcb, 0xe1, 0xeb,
	0xcb, 0xd1, 0xe0, 0x5c, 0xfb, 0x1d, 0x7f, 0x4a, 0x37, 0x84, 0xac, 0x88, 0x08, 0xb5, 0x41, 0x8d,
	0x03, 0x46, 0x47, 0x7b, 0x69, 0x2e, 0x6b, 0x28, 0x41, 0x49, 0xfa, 0x24, 0x85, 0x7a, 0x50, 0xbe,
	0xf5, 0x77, 0xa3, 0xaa, 0x94, 0x1d, 0x3e, 0xbb, 0xda, 0x83, 0x7f, 0xd1, 0xd2, 0xa2, 0xaf, 0x7d,
	0x5b, 0xd7, 0x95, 0xef, 0xeb, 0xba, 0xf2, 0x73, 0x5d, 0x57, 0xbe, 0xfe, 0xaa, 0xa7, 0xc6, 0x79,
	0xf9, 0x7e, 0x4f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x32, 0x44, 0x5c, 0x05, 0x04, 0x00,
	0x00,
}
