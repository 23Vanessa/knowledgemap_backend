// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/passport.proto

package api

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	api "knowledgemap_backend/microservices/knowledgemap/user/api"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Passport service

type PassportService interface {
	Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*PassportUserReply, error)
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*PassportUserReply, error)
	CheckSToken(ctx context.Context, in *SessionTokenReq, opts ...client.CallOption) (*api.Empty, error)
}

type passportService struct {
	c    client.Client
	name string
}

func NewPassportService(name string, c client.Client) PassportService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "api"
	}
	return &passportService{
		c:    c,
		name: name,
	}
}

func (c *passportService) Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*PassportUserReply, error) {
	req := c.c.NewRequest(c.name, "Passport.Register", in)
	out := new(PassportUserReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*PassportUserReply, error) {
	req := c.c.NewRequest(c.name, "Passport.Login", in)
	out := new(PassportUserReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportService) CheckSToken(ctx context.Context, in *SessionTokenReq, opts ...client.CallOption) (*api.Empty, error) {
	req := c.c.NewRequest(c.name, "Passport.CheckSToken", in)
	out := new(api.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Passport service

type PassportHandler interface {
	Register(context.Context, *RegisterReq, *PassportUserReply) error
	Login(context.Context, *LoginReq, *PassportUserReply) error
	CheckSToken(context.Context, *SessionTokenReq, *api.Empty) error
}

func RegisterPassportHandler(s server.Server, hdlr PassportHandler, opts ...server.HandlerOption) error {
	type passport interface {
		Register(ctx context.Context, in *RegisterReq, out *PassportUserReply) error
		Login(ctx context.Context, in *LoginReq, out *PassportUserReply) error
		CheckSToken(ctx context.Context, in *SessionTokenReq, out *api.Empty) error
	}
	type Passport struct {
		passport
	}
	h := &passportHandler{hdlr}
	return s.Handle(s.NewHandler(&Passport{h}, opts...))
}

type passportHandler struct {
	PassportHandler
}

func (h *passportHandler) Register(ctx context.Context, in *RegisterReq, out *PassportUserReply) error {
	return h.PassportHandler.Register(ctx, in, out)
}

func (h *passportHandler) Login(ctx context.Context, in *LoginReq, out *PassportUserReply) error {
	return h.PassportHandler.Login(ctx, in, out)
}

func (h *passportHandler) CheckSToken(ctx context.Context, in *SessionTokenReq, out *api.Empty) error {
	return h.PassportHandler.CheckSToken(ctx, in, out)
}
