// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/passport.proto

/*
	Package api is a generated protocol buffer package.

	It is generated from these files:
		api/passport.proto

	It has these top-level messages:
		SessionTokenReq
		PassportUserReply
		RegisterReq
		LoginReq
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import api1 "knowledgemap_backend/microservices/knowledgemap/user/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterReq_RegisterType int32

const (
	RegisterReq_STUDENT   RegisterReq_RegisterType = 0
	RegisterReq_TEACHER   RegisterReq_RegisterType = 1
	RegisterReq_SECRETARY RegisterReq_RegisterType = 2
)

var RegisterReq_RegisterType_name = map[int32]string{
	0: "STUDENT",
	1: "TEACHER",
	2: "SECRETARY",
}
var RegisterReq_RegisterType_value = map[string]int32{
	"STUDENT":   0,
	"TEACHER":   1,
	"SECRETARY": 2,
}

func (x RegisterReq_RegisterType) String() string {
	return proto.EnumName(RegisterReq_RegisterType_name, int32(x))
}
func (RegisterReq_RegisterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPassport, []int{2, 0}
}

type LoginReq_LoginType int32

const (
	LoginReq_STUDENT   LoginReq_LoginType = 0
	LoginReq_TEACHER   LoginReq_LoginType = 1
	LoginReq_SECRETARY LoginReq_LoginType = 2
	LoginReq_NOTFOUND  LoginReq_LoginType = -1
)

var LoginReq_LoginType_name = map[int32]string{
	0:  "STUDENT",
	1:  "TEACHER",
	2:  "SECRETARY",
	-1: "NOTFOUND",
}
var LoginReq_LoginType_value = map[string]int32{
	"STUDENT":   0,
	"TEACHER":   1,
	"SECRETARY": 2,
	"NOTFOUND":  -1,
}

func (x LoginReq_LoginType) String() string {
	return proto.EnumName(LoginReq_LoginType_name, int32(x))
}
func (LoginReq_LoginType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPassport, []int{3, 0} }

type SessionTokenReq struct {
	Uid    string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Stoken string `protobuf:"bytes,2,opt,name=stoken,proto3" json:"stoken,omitempty"`
}

func (m *SessionTokenReq) Reset()                    { *m = SessionTokenReq{} }
func (m *SessionTokenReq) String() string            { return proto.CompactTextString(m) }
func (*SessionTokenReq) ProtoMessage()               {}
func (*SessionTokenReq) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{0} }

func (m *SessionTokenReq) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *SessionTokenReq) GetStoken() string {
	if m != nil {
		return m.Stoken
	}
	return ""
}

type PassportUserReply struct {
	User    *api1.UserReply `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Token   string          `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Expires int64           `protobuf:"varint,3,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (m *PassportUserReply) Reset()                    { *m = PassportUserReply{} }
func (m *PassportUserReply) String() string            { return proto.CompactTextString(m) }
func (*PassportUserReply) ProtoMessage()               {}
func (*PassportUserReply) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{1} }

func (m *PassportUserReply) GetUser() *api1.UserReply {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *PassportUserReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PassportUserReply) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

type RegisterReq struct {
	Rtype        RegisterReq_RegisterType `protobuf:"varint,1,opt,name=rtype,proto3,enum=api.RegisterReq_RegisterType" json:"rtype,omitempty" form:"rtype"`
	Name         string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" form:"name"`
	Major        string                   `protobuf:"bytes,3,opt,name=major,proto3" json:"major,omitempty" form:"major"`
	Idcard       string                   `protobuf:"bytes,4,opt,name=idcard,proto3" json:"idcard,omitempty" form:"idcard"`
	Origin       string                   `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty" form:"origin"`
	Class        string                   `protobuf:"bytes,6,opt,name=class,proto3" json:"class,omitempty" form:"class"`
	Admissontime string                   `protobuf:"bytes,7,opt,name=admissontime,proto3" json:"admissontime,omitempty" form:"admissontime"`
	Account      string                   `protobuf:"bytes,8,opt,name=account,proto3" json:"account,omitempty" form:"account"`
	Password     string                   `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty" form:"password"`
	College      string                   `protobuf:"bytes,10,opt,name=college,proto3" json:"college,omitempty" form:"college"`
	Course       string                   `protobuf:"bytes,11,opt,name=course,proto3" json:"course,omitempty" form:"course"`
}

func (m *RegisterReq) Reset()                    { *m = RegisterReq{} }
func (m *RegisterReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()               {}
func (*RegisterReq) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{2} }

func (m *RegisterReq) GetRtype() RegisterReq_RegisterType {
	if m != nil {
		return m.Rtype
	}
	return RegisterReq_STUDENT
}

func (m *RegisterReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterReq) GetMajor() string {
	if m != nil {
		return m.Major
	}
	return ""
}

func (m *RegisterReq) GetIdcard() string {
	if m != nil {
		return m.Idcard
	}
	return ""
}

func (m *RegisterReq) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *RegisterReq) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *RegisterReq) GetAdmissontime() string {
	if m != nil {
		return m.Admissontime
	}
	return ""
}

func (m *RegisterReq) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RegisterReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegisterReq) GetCollege() string {
	if m != nil {
		return m.College
	}
	return ""
}

func (m *RegisterReq) GetCourse() string {
	if m != nil {
		return m.Course
	}
	return ""
}

type LoginReq struct {
	Ltype    LoginReq_LoginType `protobuf:"varint,1,opt,name=ltype,proto3,enum=api.LoginReq_LoginType" json:"ltype,omitempty" form:"ltype"`
	Account  string             `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty" form:"account"`
	Password string             `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" form:"password"`
}

func (m *LoginReq) Reset()                    { *m = LoginReq{} }
func (m *LoginReq) String() string            { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()               {}
func (*LoginReq) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{3} }

func (m *LoginReq) GetLtype() LoginReq_LoginType {
	if m != nil {
		return m.Ltype
	}
	return LoginReq_STUDENT
}

func (m *LoginReq) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *LoginReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*SessionTokenReq)(nil), "api.SessionTokenReq")
	proto.RegisterType((*PassportUserReply)(nil), "api.PassportUserReply")
	proto.RegisterType((*RegisterReq)(nil), "api.RegisterReq")
	proto.RegisterType((*LoginReq)(nil), "api.LoginReq")
	proto.RegisterEnum("api.RegisterReq_RegisterType", RegisterReq_RegisterType_name, RegisterReq_RegisterType_value)
	proto.RegisterEnum("api.LoginReq_LoginType", LoginReq_LoginType_name, LoginReq_LoginType_value)
}
func (m *SessionTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionTokenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.Stoken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Stoken)))
		i += copy(dAtA[i:], m.Stoken)
	}
	return i, nil
}

func (m *PassportUserReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PassportUserReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.User.Size()))
		n1, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.Expires != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Expires))
	}
	return i, nil
}

func (m *RegisterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Rtype))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Major) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Major)))
		i += copy(dAtA[i:], m.Major)
	}
	if len(m.Idcard) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Idcard)))
		i += copy(dAtA[i:], m.Idcard)
	}
	if len(m.Origin) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Origin)))
		i += copy(dAtA[i:], m.Origin)
	}
	if len(m.Class) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Class)))
		i += copy(dAtA[i:], m.Class)
	}
	if len(m.Admissontime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Admissontime)))
		i += copy(dAtA[i:], m.Admissontime)
	}
	if len(m.Account) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.College) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.College)))
		i += copy(dAtA[i:], m.College)
	}
	if len(m.Course) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Course)))
		i += copy(dAtA[i:], m.Course)
	}
	return i, nil
}

func (m *LoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ltype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Ltype))
	}
	if len(m.Account) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func encodeVarintPassport(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SessionTokenReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Stoken)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *PassportUserReply) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	if m.Expires != 0 {
		n += 1 + sovPassport(uint64(m.Expires))
	}
	return n
}

func (m *RegisterReq) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovPassport(uint64(m.Rtype))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Major)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Idcard)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Class)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Admissontime)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.College)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Course)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *LoginReq) Size() (n int) {
	var l int
	_ = l
	if m.Ltype != 0 {
		n += 1 + sovPassport(uint64(m.Ltype))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func sovPassport(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPassport(x uint64) (n int) {
	return sovPassport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessionTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stoken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stoken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PassportUserReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PassportUserReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PassportUserReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &api1.UserReply{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (RegisterReq_RegisterType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Major = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idcard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idcard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Class = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admissontime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admissontime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field College", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.College = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Course", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Course = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (LoginReq_LoginType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPassport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPassport
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPassport
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPassport(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPassport = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPassport   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/passport.proto", fileDescriptorPassport) }

var fileDescriptorPassport = []byte{
	// 683 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdd, 0x6e, 0xd3, 0x4a,
	0x10, 0xc7, 0xe3, 0xe6, 0x7b, 0xd2, 0x0f, 0x77, 0xdb, 0xd3, 0x5a, 0x91, 0x4e, 0x52, 0xed, 0x91,
	0x8e, 0x7a, 0xa4, 0x43, 0x0c, 0x45, 0x02, 0x89, 0x5e, 0xa0, 0x36, 0x0d, 0x42, 0x02, 0xb5, 0x68,
	0x93, 0x5e, 0x70, 0x85, 0x1c, 0x67, 0xeb, 0x2e, 0x89, 0xbd, 0xee, 0xae, 0x43, 0xc9, 0x9b, 0xf0,
	0x06, 0xbc, 0x0a, 0x37, 0x48, 0x3c, 0x41, 0x84, 0xca, 0x1b, 0xe4, 0x86, 0x4b, 0x90, 0x77, 0xed,
	0xc8, 0x35, 0x12, 0x2a, 0xbd, 0xe9, 0xcc, 0xfc, 0x7f, 0x33, 0xb3, 0x9e, 0xcc, 0x2e, 0x20, 0x27,
	0x64, 0x76, 0xe8, 0x48, 0x19, 0x72, 0x11, 0x75, 0x42, 0xc1, 0x23, 0x8e, 0x8a, 0x4e, 0xc8, 0x9a,
	0xf7, 0x3c, 0x16, 0x5d, 0x4e, 0x87, 0x1d, 0x97, 0xfb, 0xb6, 0xc7, 0x3d, 0x6e, 0x2b, 0x6d, 0x38,
	0xbd, 0x50, 0x9e, 0x72, 0x94, 0xa5, 0x73, 0x9a, 0xdd, 0x71, 0xc0, 0xaf, 0x27, 0x74, 0xe4, 0x51,
	0xdf, 0x09, 0xdf, 0x0c, 0x1d, 0x77, 0x4c, 0x83, 0x91, 0xed, 0x33, 0x57, 0x70, 0x49, 0xc5, 0x3b,
	0xe6, 0x52, 0x69, 0x67, 0x11, 0x7b, 0x2a, 0xa9, 0xb0, 0xe3, 0xe6, 0xb1, 0xa1, 0x8b, 0xe0, 0x43,
	0xd8, 0xe8, 0x53, 0x29, 0x19, 0x0f, 0x06, 0x7c, 0x4c, 0x03, 0x42, 0xaf, 0x90, 0x09, 0xc5, 0x29,
	0x1b, 0x59, 0xc6, 0x9e, 0xb1, 0x5f, 0x27, 0xb1, 0x89, 0x76, 0xa0, 0x22, 0xa3, 0x58, 0xb6, 0x56,
	0x54, 0x30, 0xf1, 0xb0, 0x07, 0x9b, 0xaf, 0x92, 0xef, 0x38, 0x97, 0x54, 0x10, 0x1a, 0x4e, 0x66,
	0x08, 0x43, 0x29, 0xae, 0xaf, 0xf2, 0x1b, 0x07, 0xeb, 0x1d, 0x27, 0x64, 0x9d, 0xa5, 0x4a, 0x94,
	0x86, 0xb6, 0xa1, 0x9c, 0xad, 0xa7, 0x1d, 0x64, 0x41, 0x95, 0xbe, 0x0f, 0x99, 0xa0, 0xd2, 0x2a,
	0xee, 0x19, 0xfb, 0x45, 0x92, 0xba, 0xf8, 0x73, 0x09, 0x1a, 0x84, 0x7a, 0x4c, 0x46, 0x71, 0x9d,
	0x2b, 0xd4, 0x83, 0xb2, 0x88, 0x66, 0x21, 0x55, 0x4d, 0xd6, 0x0f, 0xfe, 0x56, 0x4d, 0x32, 0xc0,
	0xd2, 0x1e, 0xcc, 0x42, 0x7a, 0x6c, 0x2e, 0xe6, 0xed, 0xd5, 0x0b, 0x2e, 0xfc, 0x27, 0x58, 0x65,
	0x61, 0xa2, 0xb3, 0xd1, 0x3f, 0x50, 0x0a, 0x1c, 0x9f, 0xea, 0x53, 0x1c, 0x6f, 0x2c, 0xe6, 0xed,
	0x86, 0xc6, 0xe2, 0x28, 0x26, 0x4a, 0x44, 0xff, 0x42, 0xd9, 0x77, 0xde, 0x72, 0xa1, 0xce, 0x54,
	0xcf, 0x16, 0x53, 0x61, 0x4c, 0xb4, 0x8c, 0xfe, 0x83, 0x0a, 0x1b, 0xb9, 0x8e, 0x18, 0x59, 0x25,
	0x05, 0x6e, 0x2e, 0xe6, 0xed, 0x35, 0x0d, 0xea, 0x38, 0x26, 0x09, 0x10, 0xa3, 0x5c, 0x30, 0x8f,
	0x05, 0x56, 0x39, 0x8f, 0xea, 0x38, 0x26, 0x09, 0x10, 0x77, 0x77, 0x27, 0x8e, 0x94, 0x56, 0x25,
	0xdf, 0x5d, 0x85, 0x31, 0xd1, 0x32, 0x3a, 0x84, 0x55, 0x67, 0xe4, 0x33, 0x29, 0x79, 0x10, 0x31,
	0x9f, 0x5a, 0x55, 0x85, 0xef, 0x2e, 0xe6, 0xed, 0x2d, 0x8d, 0x67, 0x55, 0x4c, 0x6e, 0xc1, 0xe8,
	0x7f, 0xa8, 0x3a, 0xae, 0xcb, 0xa7, 0x41, 0x64, 0xd5, 0x54, 0x1e, 0x5a, 0xcc, 0xdb, 0xeb, 0x49,
	0x9e, 0x16, 0x30, 0x49, 0x11, 0x64, 0x43, 0x2d, 0xde, 0xde, 0x6b, 0x2e, 0x46, 0x56, 0x5d, 0xe1,
	0x5b, 0x8b, 0x79, 0x7b, 0x43, 0xe3, 0xa9, 0x82, 0xc9, 0x12, 0x8a, 0xcb, 0xbb, 0x7c, 0x32, 0xa1,
	0x1e, 0xb5, 0x20, 0x5f, 0x3e, 0x11, 0x30, 0x49, 0x91, 0x78, 0x38, 0x2e, 0x9f, 0x0a, 0x49, 0xad,
	0x46, 0x7e, 0x38, 0x3a, 0x8e, 0x49, 0x02, 0xe0, 0xc7, 0xb0, 0x9a, 0xfd, 0xa1, 0x51, 0x03, 0xaa,
	0xfd, 0xc1, 0xf9, 0x49, 0xef, 0x74, 0x60, 0x16, 0x62, 0x67, 0xd0, 0x3b, 0xea, 0x3e, 0xef, 0x11,
	0xd3, 0x40, 0x6b, 0x50, 0xef, 0xf7, 0xba, 0xa4, 0x37, 0x38, 0x22, 0xaf, 0xcd, 0x15, 0xfc, 0xdd,
	0x80, 0xda, 0x4b, 0xee, 0x31, 0xb5, 0xef, 0x4f, 0xa1, 0x3c, 0xc9, 0x2c, 0xd3, 0xae, 0x5a, 0xa6,
	0x54, 0xd5, 0x46, 0x7e, 0x8d, 0x26, 0xc9, 0x1a, 0xa9, 0xff, 0xd9, 0xf1, 0xad, 0xfc, 0xd9, 0xf8,
	0x8a, 0x77, 0x18, 0x1f, 0x7e, 0x01, 0xf5, 0xe5, 0x21, 0xee, 0xfc, 0x89, 0xe8, 0x2f, 0xa8, 0x9d,
	0x9e, 0x0d, 0x9e, 0x9d, 0x9d, 0x9f, 0x9e, 0x98, 0x3f, 0xd2, 0x3f, 0xe3, 0xe0, 0xa3, 0x01, 0xb5,
	0xf4, 0xce, 0xa2, 0x47, 0x50, 0x4b, 0xe7, 0x87, 0xcc, 0xfc, 0x1d, 0x6a, 0xee, 0xa8, 0xc8, 0x2f,
	0x17, 0x1c, 0x17, 0xd0, 0x7d, 0x28, 0xab, 0x13, 0xa1, 0xb5, 0x5b, 0xb3, 0xfa, 0x4d, 0xc6, 0x03,
	0x68, 0x74, 0x2f, 0xa9, 0x3b, 0xee, 0xab, 0x57, 0x06, 0x6d, 0x2b, 0x30, 0xf7, 0xf0, 0x34, 0x41,
	0x45, 0x7b, 0x7e, 0x18, 0xcd, 0x70, 0xe1, 0xd8, 0xfc, 0x74, 0xd3, 0x32, 0xbe, 0xdc, 0xb4, 0x8c,
	0xaf, 0x37, 0x2d, 0xe3, 0xc3, 0xb7, 0x56, 0x61, 0x58, 0x51, 0x4f, 0xd6, 0xc3, 0x9f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x92, 0xb6, 0x6f, 0x04, 0x41, 0x05, 0x00, 0x00,
}
