// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/passport.proto

/*
	Package api is a generated protocol buffer package.

	It is generated from these files:
		api/passport.proto

	It has these top-level messages:
		SessionTokenReq
		PassportUserReply
		RegisterReq
		LoginReq
		ChangePasswordReq
		IdentifyReply
		ChangeUserInfoReq
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import api1 "knowledgemap_backend/microservices/knowledgemap/user/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SessionTokenReq struct {
	// string uid = 1;
	// string stoken = 2;
	// Identify type = 3 ;
	Cookie string `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (m *SessionTokenReq) Reset()                    { *m = SessionTokenReq{} }
func (m *SessionTokenReq) String() string            { return proto.CompactTextString(m) }
func (*SessionTokenReq) ProtoMessage()               {}
func (*SessionTokenReq) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{0} }

func (m *SessionTokenReq) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

type PassportUserReply struct {
	User    *api1.UserReply `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Token   string          `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Expires int64           `protobuf:"varint,3,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (m *PassportUserReply) Reset()                    { *m = PassportUserReply{} }
func (m *PassportUserReply) String() string            { return proto.CompactTextString(m) }
func (*PassportUserReply) ProtoMessage()               {}
func (*PassportUserReply) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{1} }

func (m *PassportUserReply) GetUser() *api1.UserReply {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *PassportUserReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PassportUserReply) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

type RegisterReq struct {
	Rtype api1.Identify `protobuf:"varint,1,opt,name=rtype,proto3,enum=api.Identify" json:"rtype,omitempty" form:"rtype"`
	Name  string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" form:"name"`
	Major string        `protobuf:"bytes,3,opt,name=major,proto3" json:"major,omitempty" form:"major"`
	Sex   string        `protobuf:"bytes,4,opt,name=sex,proto3" json:"sex,omitempty" form:"sex"`
	// string  origin = 5 [(gogoproto.moretags) = "form:\"origin\""];
	// string  class = 5 [(gogoproto.moretags) = "form:\"class\""];
	// string admissontime = 7 [(gogoproto.moretags) = "form:\"admissontime\""];
	Account  string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty" form:"account"`
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty" form:"password"`
	College  string `protobuf:"bytes,7,opt,name=college,proto3" json:"college,omitempty" form:"college"`
}

func (m *RegisterReq) Reset()                    { *m = RegisterReq{} }
func (m *RegisterReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()               {}
func (*RegisterReq) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{2} }

func (m *RegisterReq) GetRtype() api1.Identify {
	if m != nil {
		return m.Rtype
	}
	return api1.Identify_STUDENT
}

func (m *RegisterReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterReq) GetMajor() string {
	if m != nil {
		return m.Major
	}
	return ""
}

func (m *RegisterReq) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *RegisterReq) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RegisterReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegisterReq) GetCollege() string {
	if m != nil {
		return m.College
	}
	return ""
}

type LoginReq struct {
	Ltype    api1.Identify `protobuf:"varint,1,opt,name=ltype,proto3,enum=api.Identify" json:"ltype,omitempty" form:"ltype"`
	Account  string        `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty" form:"account"`
	Password string        `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" form:"password"`
}

func (m *LoginReq) Reset()                    { *m = LoginReq{} }
func (m *LoginReq) String() string            { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()               {}
func (*LoginReq) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{3} }

func (m *LoginReq) GetLtype() api1.Identify {
	if m != nil {
		return m.Ltype
	}
	return api1.Identify_STUDENT
}

func (m *LoginReq) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *LoginReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ChangePasswordReq struct {
	Userid   string        `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty" form:"userid"`
	Password string        `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" form:"password"`
	Identify api1.Identify `protobuf:"varint,3,opt,name=identify,proto3,enum=api.Identify" json:"identify,omitempty" form:"identify"`
}

func (m *ChangePasswordReq) Reset()                    { *m = ChangePasswordReq{} }
func (m *ChangePasswordReq) String() string            { return proto.CompactTextString(m) }
func (*ChangePasswordReq) ProtoMessage()               {}
func (*ChangePasswordReq) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{4} }

func (m *ChangePasswordReq) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *ChangePasswordReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ChangePasswordReq) GetIdentify() api1.Identify {
	if m != nil {
		return m.Identify
	}
	return api1.Identify_STUDENT
}

type IdentifyReply struct {
	Ltype api1.Identify `protobuf:"varint,1,opt,name=ltype,proto3,enum=api.Identify" json:"ltype,omitempty" form:"ltype"`
}

func (m *IdentifyReply) Reset()                    { *m = IdentifyReply{} }
func (m *IdentifyReply) String() string            { return proto.CompactTextString(m) }
func (*IdentifyReply) ProtoMessage()               {}
func (*IdentifyReply) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{5} }

func (m *IdentifyReply) GetLtype() api1.Identify {
	if m != nil {
		return m.Ltype
	}
	return api1.Identify_STUDENT
}

type ChangeUserInfoReq struct {
	Userid   string        `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty" form:"userid"`
	Usertype api1.Identify `protobuf:"varint,2,opt,name=usertype,proto3,enum=api.Identify" json:"usertype,omitempty" form:"usertype"`
	// string  password = 3 [(gogoproto.moretags) = "form:\"password\""];
	Major   string `protobuf:"bytes,3,opt,name=major,proto3" json:"major,omitempty" form:"major"`
	College string `protobuf:"bytes,4,opt,name=college,proto3" json:"college,omitempty" form:"college"`
	Sex     string `protobuf:"bytes,5,opt,name=sex,proto3" json:"sex,omitempty" form:"sex"`
	Name    string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty" form:"name"`
}

func (m *ChangeUserInfoReq) Reset()                    { *m = ChangeUserInfoReq{} }
func (m *ChangeUserInfoReq) String() string            { return proto.CompactTextString(m) }
func (*ChangeUserInfoReq) ProtoMessage()               {}
func (*ChangeUserInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{6} }

func (m *ChangeUserInfoReq) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *ChangeUserInfoReq) GetUsertype() api1.Identify {
	if m != nil {
		return m.Usertype
	}
	return api1.Identify_STUDENT
}

func (m *ChangeUserInfoReq) GetMajor() string {
	if m != nil {
		return m.Major
	}
	return ""
}

func (m *ChangeUserInfoReq) GetCollege() string {
	if m != nil {
		return m.College
	}
	return ""
}

func (m *ChangeUserInfoReq) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *ChangeUserInfoReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*SessionTokenReq)(nil), "api.SessionTokenReq")
	proto.RegisterType((*PassportUserReply)(nil), "api.PassportUserReply")
	proto.RegisterType((*RegisterReq)(nil), "api.RegisterReq")
	proto.RegisterType((*LoginReq)(nil), "api.LoginReq")
	proto.RegisterType((*ChangePasswordReq)(nil), "api.ChangePasswordReq")
	proto.RegisterType((*IdentifyReply)(nil), "api.IdentifyReply")
	proto.RegisterType((*ChangeUserInfoReq)(nil), "api.ChangeUserInfoReq")
}
func (m *SessionTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionTokenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cookie) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Cookie)))
		i += copy(dAtA[i:], m.Cookie)
	}
	return i, nil
}

func (m *PassportUserReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PassportUserReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.User.Size()))
		n1, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.Expires != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Expires))
	}
	return i, nil
}

func (m *RegisterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Rtype))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Major) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Major)))
		i += copy(dAtA[i:], m.Major)
	}
	if len(m.Sex) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Sex)))
		i += copy(dAtA[i:], m.Sex)
	}
	if len(m.Account) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.College) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.College)))
		i += copy(dAtA[i:], m.College)
	}
	return i, nil
}

func (m *LoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ltype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Ltype))
	}
	if len(m.Account) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *ChangePasswordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePasswordReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if m.Identify != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Identify))
	}
	return i, nil
}

func (m *IdentifyReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentifyReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ltype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Ltype))
	}
	return i, nil
}

func (m *ChangeUserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeUserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Usertype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Usertype))
	}
	if len(m.Major) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Major)))
		i += copy(dAtA[i:], m.Major)
	}
	if len(m.College) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.College)))
		i += copy(dAtA[i:], m.College)
	}
	if len(m.Sex) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Sex)))
		i += copy(dAtA[i:], m.Sex)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func encodeVarintPassport(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SessionTokenReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *PassportUserReply) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	if m.Expires != 0 {
		n += 1 + sovPassport(uint64(m.Expires))
	}
	return n
}

func (m *RegisterReq) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovPassport(uint64(m.Rtype))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Major)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.College)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *LoginReq) Size() (n int) {
	var l int
	_ = l
	if m.Ltype != 0 {
		n += 1 + sovPassport(uint64(m.Ltype))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *ChangePasswordReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	if m.Identify != 0 {
		n += 1 + sovPassport(uint64(m.Identify))
	}
	return n
}

func (m *IdentifyReply) Size() (n int) {
	var l int
	_ = l
	if m.Ltype != 0 {
		n += 1 + sovPassport(uint64(m.Ltype))
	}
	return n
}

func (m *ChangeUserInfoReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	if m.Usertype != 0 {
		n += 1 + sovPassport(uint64(m.Usertype))
	}
	l = len(m.Major)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.College)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func sovPassport(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPassport(x uint64) (n int) {
	return sovPassport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessionTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PassportUserReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PassportUserReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PassportUserReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &api1.UserReply{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (api1.Identify(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Major = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field College", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.College = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (api1.Identify(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePasswordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePasswordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePasswordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identify", wireType)
			}
			m.Identify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Identify |= (api1.Identify(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdentifyReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentifyReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentifyReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (api1.Identify(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeUserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeUserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeUserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usertype", wireType)
			}
			m.Usertype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usertype |= (api1.Identify(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Major = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field College", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.College = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPassport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPassport
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPassport
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPassport(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPassport = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPassport   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/passport.proto", fileDescriptorPassport) }

var fileDescriptorPassport = []byte{
	// 695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x4e, 0xdb, 0x40,
	0x10, 0x8e, 0xf3, 0x47, 0x98, 0x40, 0x80, 0x2d, 0x42, 0x56, 0x0e, 0x09, 0xda, 0x4a, 0x15, 0x48,
	0x6d, 0x5c, 0xd1, 0xc2, 0xa1, 0x07, 0x0e, 0x41, 0xad, 0x84, 0xd4, 0x03, 0x5a, 0xda, 0x73, 0xe5,
	0x38, 0x1b, 0xb3, 0x4d, 0xec, 0x35, 0xb6, 0x53, 0xe0, 0x4d, 0x2a, 0xf5, 0xd2, 0x37, 0xe8, 0x2b,
	0xf4, 0xd8, 0x63, 0xaf, 0xbd, 0x44, 0x15, 0x7d, 0x83, 0x3c, 0x41, 0xb5, 0xb3, 0xde, 0xc8, 0x01,
	0x15, 0x42, 0x4f, 0xd9, 0x99, 0xf9, 0xe6, 0x37, 0xdf, 0x8c, 0x81, 0xb8, 0x91, 0x70, 0x22, 0x37,
	0x49, 0x22, 0x19, 0xa7, 0x9d, 0x28, 0x96, 0xa9, 0x24, 0x25, 0x37, 0x12, 0xcd, 0x67, 0xbe, 0x48,
	0xcf, 0xc6, 0xbd, 0x8e, 0x27, 0x03, 0xc7, 0x97, 0xbe, 0x74, 0xd0, 0xd6, 0x1b, 0x0f, 0x50, 0x42,
	0x01, 0x5f, 0xda, 0xa7, 0x79, 0x34, 0x0c, 0xe5, 0xc5, 0x88, 0xf7, 0x7d, 0x1e, 0xb8, 0xd1, 0x87,
	0x9e, 0xeb, 0x0d, 0x79, 0xd8, 0x77, 0x02, 0xe1, 0xc5, 0x32, 0xe1, 0xf1, 0x27, 0xe1, 0xf1, 0xc4,
	0xc9, 0x43, 0x9c, 0x71, 0xc2, 0x63, 0x47, 0x25, 0x57, 0x0f, 0x1d, 0x84, 0xee, 0xc2, 0xda, 0x29,
	0x4f, 0x12, 0x21, 0xc3, 0x77, 0x72, 0xc8, 0x43, 0xc6, 0xcf, 0xc9, 0x16, 0x54, 0x3d, 0x29, 0x87,
	0x82, 0xdb, 0xd6, 0xb6, 0xb5, 0xb3, 0xcc, 0x32, 0x89, 0xfa, 0xb0, 0x71, 0x92, 0x55, 0xfd, 0x3e,
	0xe1, 0x31, 0xe3, 0xd1, 0xe8, 0x8a, 0x50, 0x28, 0xab, 0x68, 0x08, 0xad, 0xef, 0x35, 0x3a, 0x6e,
	0x24, 0x3a, 0x33, 0x2b, 0x43, 0x1b, 0xd9, 0x84, 0x4a, 0xaa, 0x82, 0xdb, 0x45, 0x8c, 0xa7, 0x05,
	0x62, 0xc3, 0x12, 0xbf, 0x8c, 0x44, 0xcc, 0x13, 0xbb, 0xb4, 0x6d, 0xed, 0x94, 0x98, 0x11, 0xe9,
	0xf7, 0x22, 0xd4, 0x19, 0xf7, 0x45, 0x92, 0xaa, 0x38, 0xe7, 0x64, 0x1f, 0x2a, 0x71, 0x7a, 0x15,
	0xe9, 0x7a, 0x1a, 0x7b, 0xab, 0x98, 0xe4, 0xb8, 0xcf, 0xc3, 0x54, 0x0c, 0xae, 0xba, 0xeb, 0xd3,
	0x49, 0x7b, 0x65, 0x20, 0xe3, 0xe0, 0x15, 0x45, 0x14, 0x65, 0x1a, 0x4d, 0x1e, 0x43, 0x39, 0x74,
	0x03, 0xae, 0xb3, 0x76, 0xd7, 0xa6, 0x93, 0x76, 0x5d, 0xc3, 0x94, 0x96, 0x32, 0x34, 0x92, 0x27,
	0x50, 0x09, 0xdc, 0x8f, 0x32, 0xc6, 0x1a, 0x96, 0xf3, 0xc1, 0x50, 0x4d, 0x99, 0x36, 0x93, 0x6d,
	0x28, 0x25, 0xfc, 0xd2, 0x2e, 0x23, 0xaa, 0x31, 0x9d, 0xb4, 0x41, 0xa3, 0x12, 0x7e, 0x49, 0x99,
	0x32, 0x91, 0xa7, 0xb0, 0xe4, 0x7a, 0x9e, 0x1c, 0x87, 0xa9, 0x5d, 0x41, 0x14, 0x99, 0x4e, 0xda,
	0x0d, 0x8d, 0xca, 0x0c, 0x94, 0x19, 0x08, 0x71, 0xa0, 0xa6, 0x28, 0x70, 0x21, 0xe3, 0xbe, 0x5d,
	0x45, 0xf8, 0xa3, 0xe9, 0xa4, 0xbd, 0xa6, 0xe1, 0xc6, 0x42, 0xd9, 0x0c, 0xa4, 0xc2, 0x7b, 0x72,
	0x34, 0xe2, 0x3e, 0xb7, 0x97, 0x6e, 0x86, 0xcf, 0x0c, 0x94, 0x19, 0x08, 0xfd, 0x6a, 0x41, 0xed,
	0xad, 0xf4, 0x45, 0x98, 0xcd, 0x6f, 0xb4, 0xd0, 0xfc, 0x46, 0xd9, 0xfc, 0xf0, 0x37, 0xdf, 0x50,
	0xf1, 0x61, 0x0d, 0x95, 0x16, 0x68, 0x88, 0x7e, 0xb3, 0x60, 0xe3, 0xe8, 0xcc, 0x0d, 0x7d, 0x7e,
	0x92, 0xa9, 0x54, 0xad, 0xbb, 0x50, 0x55, 0x9c, 0x11, 0x7d, 0x4d, 0xbe, 0xee, 0xc6, 0x74, 0xd2,
	0x5e, 0xd5, 0x41, 0xb4, 0x9e, 0xb2, 0x0c, 0x30, 0x97, 0xb1, 0xb8, 0xc8, 0x08, 0x0f, 0xa1, 0x26,
	0xb2, 0xae, 0xb1, 0xc4, 0x5b, 0xa3, 0xc8, 0xf9, 0x1b, 0x20, 0x65, 0x33, 0x1f, 0xfa, 0x06, 0x56,
	0x0d, 0x54, 0x93, 0xff, 0xff, 0x06, 0x4b, 0xbf, 0x14, 0x4d, 0xe7, 0x6a, 0x53, 0x8e, 0xc3, 0x81,
	0x7c, 0x60, 0xe7, 0x87, 0x50, 0x53, 0x2f, 0x4c, 0x5d, 0xbc, 0xa7, 0x11, 0x03, 0xa4, 0x6c, 0xe6,
	0xb3, 0x30, 0xe9, 0x73, 0x9c, 0x2b, 0xdf, 0xcb, 0x39, 0xb3, 0x22, 0x95, 0x7f, 0xaf, 0x88, 0xd9,
	0xc8, 0xea, 0x1d, 0x1b, 0xb9, 0xf7, 0xab, 0x08, 0x35, 0x73, 0x67, 0xc8, 0x01, 0xd4, 0xcc, 0x25,
	0x20, 0xeb, 0xd8, 0x63, 0xee, 0x30, 0x34, 0xb7, 0x50, 0x73, 0xeb, 0x28, 0xd1, 0x02, 0x79, 0x0e,
	0x15, 0xa4, 0x3f, 0xd1, 0x83, 0x31, 0xab, 0x70, 0x87, 0xc7, 0x3e, 0xd4, 0x8f, 0xce, 0xb8, 0x37,
	0x3c, 0xc5, 0x3b, 0x48, 0x36, 0x11, 0x78, 0xe3, 0x34, 0x36, 0x6f, 0xdc, 0x37, 0x5a, 0x20, 0x07,
	0xd0, 0x98, 0x27, 0x31, 0xd1, 0x29, 0x6e, 0x31, 0xbb, 0x09, 0xa8, 0x7f, 0x1d, 0x44, 0xa9, 0xf2,
	0x3b, 0x34, 0x7e, 0x86, 0x02, 0x73, 0x7e, 0x39, 0x5e, 0x34, 0xc9, 0x2c, 0xa7, 0xd6, 0xe8, 0xbc,
	0x2f, 0x95, 0x3f, 0xf7, 0x86, 0xc7, 0x61, 0xf6, 0x9f, 0x93, 0x95, 0x5c, 0x6d, 0xc6, 0x6b, 0x8e,
	0xae, 0xb4, 0xd0, 0x5d, 0xff, 0x71, 0xdd, 0xb2, 0x7e, 0x5e, 0xb7, 0xac, 0xdf, 0xd7, 0x2d, 0xeb,
	0xf3, 0x9f, 0x56, 0xa1, 0x57, 0xc5, 0xcf, 0xc0, 0x8b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xec,
	0x2c, 0xc5, 0xa8, 0x95, 0x06, 0x00, 0x00,
}
